!function(t,e){"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){function i(t){var e=t.length,i=st.type(t);return"function"===i||st.isWindow(t)?!1:1===t.nodeType&&e?!0:"array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t}function n(t,e,i){if(st.isFunction(e))return st.grep(t,function(t,n){return!!e.call(t,n,t)!==i});if(e.nodeType)return st.grep(t,function(t){return t===e!==i});if("string"==typeof e){if(ht.test(e))return st.filter(e,t,i);e=st.filter(e,t)}return st.grep(t,function(t){return st.inArray(t,e)>=0!==i})}function s(t,e){do t=t[e];while(t&&1!==t.nodeType);return t}function r(t){var e=bt[t]={};return st.each(t.match(wt)||[],function(t,i){e[i]=!0}),e}function o(){ft.addEventListener?(ft.removeEventListener("DOMContentLoaded",a,!1),t.removeEventListener("load",a,!1)):(ft.detachEvent("onreadystatechange",a),t.detachEvent("onload",a))}function a(){(ft.addEventListener||"load"===event.type||"complete"===ft.readyState)&&(o(),st.ready())}function l(t,e,i){if(void 0===i&&1===t.nodeType){var n="data-"+e.replace(Ct,"-$1").toLowerCase();if(i=t.getAttribute(n),"string"==typeof i){try{i="true"===i?!0:"false"===i?!1:"null"===i?null:+i+""===i?+i:_t.test(i)?st.parseJSON(i):i}catch(s){}st.data(t,e,i)}else i=void 0}return i}function c(t){var e;for(e in t)if(("data"!==e||!st.isEmptyObject(t[e]))&&"toJSON"!==e)return!1;return!0}function u(t,e,i,n){if(st.acceptData(t)){var s,r,o=st.expando,a=t.nodeType,l=a?st.cache:t,c=a?t[o]:t[o]&&o;if(c&&l[c]&&(n||l[c].data)||void 0!==i||"string"!=typeof e)return c||(c=a?t[o]=Y.pop()||st.guid++:o),l[c]||(l[c]=a?{}:{toJSON:st.noop}),("object"==typeof e||"function"==typeof e)&&(n?l[c]=st.extend(l[c],e):l[c].data=st.extend(l[c].data,e)),r=l[c],n||(r.data||(r.data={}),r=r.data),void 0!==i&&(r[st.camelCase(e)]=i),"string"==typeof e?(s=r[e],null==s&&(s=r[st.camelCase(e)])):s=r,s}}function d(t,e,i){if(st.acceptData(t)){var n,s,r=t.nodeType,o=r?st.cache:t,a=r?t[st.expando]:st.expando;if(o[a]){if(e&&(n=i?o[a]:o[a].data)){st.isArray(e)?e=e.concat(st.map(e,st.camelCase)):e in n?e=[e]:(e=st.camelCase(e),e=e in n?[e]:e.split(" ")),s=e.length;for(;s--;)delete n[e[s]];if(i?!c(n):!st.isEmptyObject(n))return}(i||(delete o[a].data,c(o[a])))&&(r?st.cleanData([t],!0):it.deleteExpando||o!=o.window?delete o[a]:o[a]=null)}}}function h(){return!0}function p(){return!1}function f(){try{return ft.activeElement}catch(t){}}function g(t){var e=Lt.split("|"),i=t.createDocumentFragment();if(i.createElement)for(;e.length;)i.createElement(e.pop());return i}function v(t,e){var i,n,s=0,r=typeof t.getElementsByTagName!==kt?t.getElementsByTagName(e||"*"):typeof t.querySelectorAll!==kt?t.querySelectorAll(e||"*"):void 0;if(!r)for(r=[],i=t.childNodes||t;null!=(n=i[s]);s++)!e||st.nodeName(n,e)?r.push(n):st.merge(r,v(n,e));return void 0===e||e&&st.nodeName(t,e)?st.merge([t],r):r}function m(t){At.test(t.type)&&(t.defaultChecked=t.checked)}function y(t,e){return st.nodeName(t,"table")&&st.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t.appendChild(t.ownerDocument.createElement("tbody")):t}function w(t){return t.type=(null!==st.find.attr(t,"type"))+"/"+t.type,t}function b(t){var e=Vt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function x(t,e){for(var i,n=0;null!=(i=t[n]);n++)st._data(i,"globalEval",!e||st._data(e[n],"globalEval"))}function T(t,e){if(1===e.nodeType&&st.hasData(t)){var i,n,s,r=st._data(t),o=st._data(e,r),a=r.events;if(a){delete o.handle,o.events={};for(i in a)for(n=0,s=a[i].length;s>n;n++)st.event.add(e,i,a[i][n])}o.data&&(o.data=st.extend({},o.data))}}function k(t,e){var i,n,s;if(1===e.nodeType){if(i=e.nodeName.toLowerCase(),!it.noCloneEvent&&e[st.expando]){s=st._data(e);for(n in s.events)st.removeEvent(e,n,s.handle);e.removeAttribute(st.expando)}"script"===i&&e.text!==t.text?(w(e).text=t.text,b(e)):"object"===i?(e.parentNode&&(e.outerHTML=t.outerHTML),it.html5Clone&&t.innerHTML&&!st.trim(e.innerHTML)&&(e.innerHTML=t.innerHTML)):"input"===i&&At.test(t.type)?(e.defaultChecked=e.checked=t.checked,e.value!==t.value&&(e.value=t.value)):"option"===i?e.defaultSelected=e.selected=t.defaultSelected:("input"===i||"textarea"===i)&&(e.defaultValue=t.defaultValue)}}function _(e,i){var n,s=st(i.createElement(e)).appendTo(i.body),r=t.getDefaultComputedStyle&&(n=t.getDefaultComputedStyle(s[0]))?n.display:st.css(s[0],"display");return s.detach(),r}function C(t){var e=ft,i=Kt[t];return i||(i=_(t,e),"none"!==i&&i||(Zt=(Zt||st("<iframe frameborder='0' width='0' height='0'/>")).appendTo(e.documentElement),e=(Zt[0].contentWindow||Zt[0].contentDocument).document,e.write(),e.close(),i=_(t,e),Zt.detach()),Kt[t]=i),i}function S(t,e){return{get:function(){var i=t();if(null!=i)return i?void delete this.get:(this.get=e).apply(this,arguments)}}}function $(t,e){if(e in t)return e;for(var i=e.charAt(0).toUpperCase()+e.slice(1),n=e,s=he.length;s--;)if(e=he[s]+i,e in t)return e;return n}function E(t,e){for(var i,n,s,r=[],o=0,a=t.length;a>o;o++)n=t[o],n.style&&(r[o]=st._data(n,"olddisplay"),i=n.style.display,e?(r[o]||"none"!==i||(n.style.display=""),""===n.style.display&&Et(n)&&(r[o]=st._data(n,"olddisplay",C(n.nodeName)))):(s=Et(n),(i&&"none"!==i||!s)&&st._data(n,"olddisplay",s?i:st.css(n,"display"))));for(o=0;a>o;o++)n=t[o],n.style&&(e&&"none"!==n.style.display&&""!==n.style.display||(n.style.display=e?r[o]||"":"none"));return t}function N(t,e,i){var n=le.exec(e);return n?Math.max(0,n[1]-(i||0))+(n[2]||"px"):e}function A(t,e,i,n,s){for(var r=i===(n?"border":"content")?4:"width"===e?1:0,o=0;4>r;r+=2)"margin"===i&&(o+=st.css(t,i+$t[r],!0,s)),n?("content"===i&&(o-=st.css(t,"padding"+$t[r],!0,s)),"margin"!==i&&(o-=st.css(t,"border"+$t[r]+"Width",!0,s))):(o+=st.css(t,"padding"+$t[r],!0,s),"padding"!==i&&(o+=st.css(t,"border"+$t[r]+"Width",!0,s)));return o}function j(t,e,i){var n=!0,s="width"===e?t.offsetWidth:t.offsetHeight,r=te(t),o=it.boxSizing&&"border-box"===st.css(t,"boxSizing",!1,r);if(0>=s||null==s){if(s=ee(t,e,r),(0>s||null==s)&&(s=t.style[e]),ne.test(s))return s;n=o&&(it.boxSizingReliable()||s===t.style[e]),s=parseFloat(s)||0}return s+A(t,e,i||(o?"border":"content"),n,r)+"px"}function D(t,e,i,n,s){return new D.prototype.init(t,e,i,n,s)}function H(){return setTimeout(function(){pe=void 0}),pe=st.now()}function O(t,e){var i,n={height:t},s=0;for(e=e?1:0;4>s;s+=2-e)i=$t[s],n["margin"+i]=n["padding"+i]=t;return e&&(n.opacity=n.width=t),n}function P(t,e,i){for(var n,s=(we[e]||[]).concat(we["*"]),r=0,o=s.length;o>r;r++)if(n=s[r].call(i,e,t))return n}function L(t,e,i){var n,s,r,o,a,l,c,u,d=this,h={},p=t.style,f=t.nodeType&&Et(t),g=st._data(t,"fxshow");i.queue||(a=st._queueHooks(t,"fx"),null==a.unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,st.queue(t,"fx").length||a.empty.fire()})})),1===t.nodeType&&("height"in e||"width"in e)&&(i.overflow=[p.overflow,p.overflowX,p.overflowY],c=st.css(t,"display"),u="none"===c?st._data(t,"olddisplay")||C(t.nodeName):c,"inline"===u&&"none"===st.css(t,"float")&&(it.inlineBlockNeedsLayout&&"inline"!==C(t.nodeName)?p.zoom=1:p.display="inline-block")),i.overflow&&(p.overflow="hidden",it.shrinkWrapBlocks()||d.always(function(){p.overflow=i.overflow[0],p.overflowX=i.overflow[1],p.overflowY=i.overflow[2]}));for(n in e)if(s=e[n],ge.exec(s)){if(delete e[n],r=r||"toggle"===s,s===(f?"hide":"show")){if("show"!==s||!g||void 0===g[n])continue;f=!0}h[n]=g&&g[n]||st.style(t,n)}else c=void 0;if(st.isEmptyObject(h))"inline"===("none"===c?C(t.nodeName):c)&&(p.display=c);else{g?"hidden"in g&&(f=g.hidden):g=st._data(t,"fxshow",{}),r&&(g.hidden=!f),f?st(t).show():d.done(function(){st(t).hide()}),d.done(function(){var e;st._removeData(t,"fxshow");for(e in h)st.style(t,e,h[e])});for(n in h)o=P(f?g[n]:0,n,d),n in g||(g[n]=o.start,f&&(o.end=o.start,o.start="width"===n||"height"===n?1:0))}}function M(t,e){var i,n,s,r,o;for(i in t)if(n=st.camelCase(i),s=e[n],r=t[i],st.isArray(r)&&(s=r[1],r=t[i]=r[0]),i!==n&&(t[n]=r,delete t[i]),o=st.cssHooks[n],o&&"expand"in o){r=o.expand(r),delete t[n];for(i in r)i in t||(t[i]=r[i],e[i]=s)}else e[n]=s}function z(t,e,i){var n,s,r=0,o=ye.length,a=st.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var e=pe||H(),i=Math.max(0,c.startTime+c.duration-e),n=i/c.duration||0,r=1-n,o=0,l=c.tweens.length;l>o;o++)c.tweens[o].run(r);return a.notifyWith(t,[c,r,i]),1>r&&l?i:(a.resolveWith(t,[c]),!1)},c=a.promise({elem:t,props:st.extend({},e),opts:st.extend(!0,{specialEasing:{}},i),originalProperties:e,originalOptions:i,startTime:pe||H(),duration:i.duration,tweens:[],createTween:function(e,i){var n=st.Tween(t,c.opts,e,i,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(n),n},stop:function(e){var i=0,n=e?c.tweens.length:0;if(s)return this;for(s=!0;n>i;i++)c.tweens[i].run(1);return e?a.resolveWith(t,[c,e]):a.rejectWith(t,[c,e]),this}}),u=c.props;for(M(u,c.opts.specialEasing);o>r;r++)if(n=ye[r].call(c,t,u,c.opts))return n;return st.map(u,P,c),st.isFunction(c.opts.start)&&c.opts.start.call(t,c),st.fx.timer(st.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always)}function q(t){return function(e,i){"string"!=typeof e&&(i=e,e="*");var n,s=0,r=e.toLowerCase().match(wt)||[];if(st.isFunction(i))for(;n=r[s++];)"+"===n.charAt(0)?(n=n.slice(1)||"*",(t[n]=t[n]||[]).unshift(i)):(t[n]=t[n]||[]).push(i)}}function F(t,e,i,n){function s(a){var l;return r[a]=!0,st.each(t[a]||[],function(t,a){var c=a(e,i,n);return"string"!=typeof c||o||r[c]?o?!(l=c):void 0:(e.dataTypes.unshift(c),s(c),!1)}),l}var r={},o=t===We;return s(e.dataTypes[0])||!r["*"]&&s("*")}function I(t,e){var i,n,s=st.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((s[n]?t:i||(i={}))[n]=e[n]);return i&&st.extend(!0,t,i),t}function R(t,e,i){for(var n,s,r,o,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===s&&(s=t.mimeType||e.getResponseHeader("Content-Type"));if(s)for(o in a)if(a[o]&&a[o].test(s)){l.unshift(o);break}if(l[0]in i)r=l[0];else{for(o in i){if(!l[0]||t.converters[o+" "+l[0]]){r=o;break}n||(n=o)}r=r||n}return r?(r!==l[0]&&l.unshift(r),i[r]):void 0}function W(t,e,i,n){var s,r,o,a,l,c={},u=t.dataTypes.slice();if(u[1])for(o in t.converters)c[o.toLowerCase()]=t.converters[o];for(r=u.shift();r;)if(t.responseFields[r]&&(i[t.responseFields[r]]=e),!l&&n&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(o=c[l+" "+r]||c["* "+r],!o)for(s in c)if(a=s.split(" "),a[1]===r&&(o=c[l+" "+a[0]]||c["* "+a[0]])){o===!0?o=c[s]:c[s]!==!0&&(r=a[0],u.unshift(a[1]));break}if(o!==!0)if(o&&t["throws"])e=o(e);else try{e=o(e)}catch(d){return{state:"parsererror",error:o?d:"No conversion from "+l+" to "+r}}}return{state:"success",data:e}}function B(t,e,i,n){var s;if(st.isArray(e))st.each(e,function(e,s){i||Ve.test(t)?n(t,s):B(t+"["+("object"==typeof s?e:"")+"]",s,i,n)});else if(i||"object"!==st.type(e))n(t,e);else for(s in e)B(t+"["+s+"]",e[s],i,n)}function X(){try{return new t.XMLHttpRequest}catch(e){}}function U(){try{return new t.ActiveXObject("Microsoft.XMLHTTP")}catch(e){}}function V(t){return st.isWindow(t)?t:9===t.nodeType?t.defaultView||t.parentWindow:!1}var Y=[],J=Y.slice,Q=Y.concat,G=Y.push,Z=Y.indexOf,K={},tt=K.toString,et=K.hasOwnProperty,it={},nt="1.11.1",st=function(t,e){return new st.fn.init(t,e)},rt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,ot=/^-ms-/,at=/-([\da-z])/gi,lt=function(t,e){return e.toUpperCase()};st.fn=st.prototype={jquery:nt,constructor:st,selector:"",length:0,toArray:function(){return J.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:J.call(this)},pushStack:function(t){var e=st.merge(this.constructor(),t);return e.prevObject=this,e.context=this.context,e},each:function(t,e){return st.each(this,t,e)},map:function(t){return this.pushStack(st.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(J.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(0>t?e:0);return this.pushStack(i>=0&&e>i?[this[i]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:G,sort:Y.sort,splice:Y.splice},st.extend=st.fn.extend=function(){var t,e,i,n,s,r,o=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof o&&(c=o,o=arguments[a]||{},a++),"object"==typeof o||st.isFunction(o)||(o={}),a===l&&(o=this,a--);l>a;a++)if(null!=(s=arguments[a]))for(n in s)t=o[n],i=s[n],o!==i&&(c&&i&&(st.isPlainObject(i)||(e=st.isArray(i)))?(e?(e=!1,r=t&&st.isArray(t)?t:[]):r=t&&st.isPlainObject(t)?t:{},o[n]=st.extend(c,r,i)):void 0!==i&&(o[n]=i));return o},st.extend({expando:"jQuery"+(nt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===st.type(t)},isArray:Array.isArray||function(t){return"array"===st.type(t)},isWindow:function(t){return null!=t&&t==t.window},isNumeric:function(t){return!st.isArray(t)&&t-parseFloat(t)>=0},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},isPlainObject:function(t){var e;if(!t||"object"!==st.type(t)||t.nodeType||st.isWindow(t))return!1;try{if(t.constructor&&!et.call(t,"constructor")&&!et.call(t.constructor.prototype,"isPrototypeOf"))return!1}catch(i){return!1}if(it.ownLast)for(e in t)return et.call(t,e);for(e in t);return void 0===e||et.call(t,e)},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?K[tt.call(t)]||"object":typeof t},globalEval:function(e){e&&st.trim(e)&&(t.execScript||function(e){t.eval.call(t,e)})(e)},camelCase:function(t){return t.replace(ot,"ms-").replace(at,lt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e,n){var s,r=0,o=t.length,a=i(t);if(n){if(a)for(;o>r&&(s=e.apply(t[r],n),s!==!1);r++);else for(r in t)if(s=e.apply(t[r],n),s===!1)break}else if(a)for(;o>r&&(s=e.call(t[r],r,t[r]),s!==!1);r++);else for(r in t)if(s=e.call(t[r],r,t[r]),s===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(rt,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(i(Object(t))?st.merge(n,"string"==typeof t?[t]:t):G.call(n,t)),n},inArray:function(t,e,i){var n;if(e){if(Z)return Z.call(e,t,i);for(n=e.length,i=i?0>i?Math.max(0,n+i):i:0;n>i;i++)if(i in e&&e[i]===t)return i}return-1},merge:function(t,e){for(var i=+e.length,n=0,s=t.length;i>n;)t[s++]=e[n++];if(i!==i)for(;void 0!==e[n];)t[s++]=e[n++];return t.length=s,t},grep:function(t,e,i){for(var n,s=[],r=0,o=t.length,a=!i;o>r;r++)n=!e(t[r],r),n!==a&&s.push(t[r]);return s},map:function(t,e,n){var s,r=0,o=t.length,a=i(t),l=[];if(a)for(;o>r;r++)s=e(t[r],r,n),null!=s&&l.push(s);else for(r in t)s=e(t[r],r,n),null!=s&&l.push(s);return Q.apply([],l)},guid:1,proxy:function(t,e){var i,n,s;return"string"==typeof e&&(s=t[e],e=t,t=s),st.isFunction(t)?(i=J.call(arguments,2),n=function(){return t.apply(e||this,i.concat(J.call(arguments)))},n.guid=t.guid=t.guid||st.guid++,n):void 0},now:function(){return+new Date},support:it}),st.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(t,e){K["[object "+e+"]"]=e.toLowerCase()});var ct=function(t){function e(t,e,i,n){var s,r,o,a,l,c,d,p,f,g;if((e?e.ownerDocument||e:F)!==D&&j(e),e=e||D,i=i||[],!t||"string"!=typeof t)return i;if(1!==(a=e.nodeType)&&9!==a)return[];if(O&&!n){if(s=yt.exec(t))if(o=s[1]){if(9===a){if(r=e.getElementById(o),!r||!r.parentNode)return i;if(r.id===o)return i.push(r),i}else if(e.ownerDocument&&(r=e.ownerDocument.getElementById(o))&&z(e,r)&&r.id===o)return i.push(r),i}else{if(s[2])return K.apply(i,e.getElementsByTagName(t)),i;if((o=s[3])&&x.getElementsByClassName&&e.getElementsByClassName)return K.apply(i,e.getElementsByClassName(o)),i}if(x.qsa&&(!P||!P.test(t))){if(p=d=q,f=e,g=9===a&&t,1===a&&"object"!==e.nodeName.toLowerCase()){for(c=C(t),(d=e.getAttribute("id"))?p=d.replace(bt,"\\$&"):e.setAttribute("id",p),p="[id='"+p+"'] ",l=c.length;l--;)c[l]=p+h(c[l]);f=wt.test(t)&&u(e.parentNode)||e,g=c.join(",")}if(g)try{return K.apply(i,f.querySelectorAll(g)),i}catch(v){}finally{d||e.removeAttribute("id")}}}return $(t.replace(lt,"$1"),e,i,n)}function i(){function t(i,n){return e.push(i+" ")>T.cacheLength&&delete t[e.shift()],t[i+" "]=n}var e=[];return t}function n(t){return t[q]=!0,t}function s(t){var e=D.createElement("div");try{return!!t(e)}catch(i){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function r(t,e){for(var i=t.split("|"),n=t.length;n--;)T.attrHandle[i[n]]=e}function o(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&(~e.sourceIndex||Y)-(~t.sourceIndex||Y);if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function a(t){return function(e){var i=e.nodeName.toLowerCase();return"input"===i&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function c(t){return n(function(e){return e=+e,n(function(i,n){for(var s,r=t([],i.length,e),o=r.length;o--;)i[s=r[o]]&&(i[s]=!(n[s]=i[s]))})})}function u(t){return t&&typeof t.getElementsByTagName!==V&&t}function d(){}function h(t){for(var e=0,i=t.length,n="";i>e;e++)n+=t[e].value;return n}function p(t,e,i){var n=e.dir,s=i&&"parentNode"===n,r=R++;return e.first?function(e,i,r){for(;e=e[n];)if(1===e.nodeType||s)return t(e,i,r)}:function(e,i,o){var a,l,c=[I,r];if(o){for(;e=e[n];)if((1===e.nodeType||s)&&t(e,i,o))return!0}else for(;e=e[n];)if(1===e.nodeType||s){if(l=e[q]||(e[q]={}),(a=l[n])&&a[0]===I&&a[1]===r)return c[2]=a[2];if(l[n]=c,c[2]=t(e,i,o))return!0}}}function f(t){return t.length>1?function(e,i,n){for(var s=t.length;s--;)if(!t[s](e,i,n))return!1;return!0}:t[0]}function g(t,i,n){for(var s=0,r=i.length;r>s;s++)e(t,i[s],n);return n}function v(t,e,i,n,s){for(var r,o=[],a=0,l=t.length,c=null!=e;l>a;a++)(r=t[a])&&(!i||i(r,n,s))&&(o.push(r),c&&e.push(a));return o}function m(t,e,i,s,r,o){return s&&!s[q]&&(s=m(s)),r&&!r[q]&&(r=m(r,o)),n(function(n,o,a,l){var c,u,d,h=[],p=[],f=o.length,m=n||g(e||"*",a.nodeType?[a]:a,[]),y=!t||!n&&e?m:v(m,h,t,a,l),w=i?r||(n?t:f||s)?[]:o:y;if(i&&i(y,w,a,l),s)for(c=v(w,p),s(c,[],a,l),u=c.length;u--;)(d=c[u])&&(w[p[u]]=!(y[p[u]]=d));if(n){if(r||t){if(r){for(c=[],u=w.length;u--;)(d=w[u])&&c.push(y[u]=d);r(null,w=[],c,l)}for(u=w.length;u--;)(d=w[u])&&(c=r?et.call(n,d):h[u])>-1&&(n[c]=!(o[c]=d))}}else w=v(w===o?w.splice(f,w.length):w),r?r(null,o,w,l):K.apply(o,w)})}function y(t){for(var e,i,n,s=t.length,r=T.relative[t[0].type],o=r||T.relative[" "],a=r?1:0,l=p(function(t){return t===e},o,!0),c=p(function(t){return et.call(e,t)>-1},o,!0),u=[function(t,i,n){return!r&&(n||i!==E)||((e=i).nodeType?l(t,i,n):c(t,i,n))}];s>a;a++)if(i=T.relative[t[a].type])u=[p(f(u),i)];else{if(i=T.filter[t[a].type].apply(null,t[a].matches),i[q]){for(n=++a;s>n&&!T.relative[t[n].type];n++);return m(a>1&&f(u),a>1&&h(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(lt,"$1"),i,n>a&&y(t.slice(a,n)),s>n&&y(t=t.slice(n)),s>n&&h(t))}u.push(i)}return f(u)}function w(t,i){var s=i.length>0,r=t.length>0,o=function(n,o,a,l,c){var u,d,h,p=0,f="0",g=n&&[],m=[],y=E,w=n||r&&T.find.TAG("*",c),b=I+=null==y?1:Math.random()||.1,x=w.length;for(c&&(E=o!==D&&o);f!==x&&null!=(u=w[f]);f++){if(r&&u){for(d=0;h=t[d++];)if(h(u,o,a)){l.push(u);break}c&&(I=b)}s&&((u=!h&&u)&&p--,n&&g.push(u))}if(p+=f,s&&f!==p){for(d=0;h=i[d++];)h(g,m,o,a);if(n){if(p>0)for(;f--;)g[f]||m[f]||(m[f]=G.call(l));m=v(m)}K.apply(l,m),c&&!n&&m.length>0&&p+i.length>1&&e.uniqueSort(l)}return c&&(I=b,E=y),g};return s?n(o):o}var b,x,T,k,_,C,S,$,E,N,A,j,D,H,O,P,L,M,z,q="sizzle"+-new Date,F=t.document,I=0,R=0,W=i(),B=i(),X=i(),U=function(t,e){return t===e&&(A=!0),0},V="undefined",Y=1<<31,J={}.hasOwnProperty,Q=[],G=Q.pop,Z=Q.push,K=Q.push,tt=Q.slice,et=Q.indexOf||function(t){for(var e=0,i=this.length;i>e;e++)if(this[e]===t)return e;return-1},it="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",st="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",rt=st.replace("w","w#"),ot="\\["+nt+"*("+st+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+rt+"))|)"+nt+"*\\]",at=":("+st+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ot+")*)|.*)\\)|)",lt=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),ct=new RegExp("^"+nt+"*,"+nt+"*"),ut=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),dt=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ht=new RegExp(at),pt=new RegExp("^"+rt+"$"),ft={ID:new RegExp("^#("+st+")"),CLASS:new RegExp("^\\.("+st+")"),TAG:new RegExp("^("+st.replace("w","w*")+")"),ATTR:new RegExp("^"+ot),PSEUDO:new RegExp("^"+at),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+it+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},gt=/^(?:input|select|textarea|button)$/i,vt=/^h\d$/i,mt=/^[^{]+\{\s*\[native \w/,yt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,wt=/[+~]/,bt=/'|\\/g,xt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),Tt=function(t,e,i){var n="0x"+e-65536;return n!==n||i?e:0>n?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)};try{K.apply(Q=tt.call(F.childNodes),F.childNodes),Q[F.childNodes.length].nodeType}catch(kt){K={apply:Q.length?function(t,e){Z.apply(t,tt.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}x=e.support={},_=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},j=e.setDocument=function(t){var e,i=t?t.ownerDocument||t:F,n=i.defaultView;return i!==D&&9===i.nodeType&&i.documentElement?(D=i,H=i.documentElement,O=!_(i),n&&n!==n.top&&(n.addEventListener?n.addEventListener("unload",function(){j()},!1):n.attachEvent&&n.attachEvent("onunload",function(){j()})),x.attributes=s(function(t){return t.className="i",!t.getAttribute("className")}),x.getElementsByTagName=s(function(t){return t.appendChild(i.createComment("")),!t.getElementsByTagName("*").length}),x.getElementsByClassName=mt.test(i.getElementsByClassName)&&s(function(t){return t.innerHTML="<div class='a'></div><div class='a i'></div>",t.firstChild.className="i",2===t.getElementsByClassName("i").length}),x.getById=s(function(t){return H.appendChild(t).id=q,!i.getElementsByName||!i.getElementsByName(q).length}),x.getById?(T.find.ID=function(t,e){if(typeof e.getElementById!==V&&O){var i=e.getElementById(t);return i&&i.parentNode?[i]:[]}},T.filter.ID=function(t){var e=t.replace(xt,Tt);return function(t){return t.getAttribute("id")===e}}):(delete T.find.ID,T.filter.ID=function(t){var e=t.replace(xt,Tt);return function(t){var i=typeof t.getAttributeNode!==V&&t.getAttributeNode("id");return i&&i.value===e}}),T.find.TAG=x.getElementsByTagName?function(t,e){return typeof e.getElementsByTagName!==V?e.getElementsByTagName(t):void 0}:function(t,e){var i,n=[],s=0,r=e.getElementsByTagName(t);if("*"===t){for(;i=r[s++];)1===i.nodeType&&n.push(i);return n}return r},T.find.CLASS=x.getElementsByClassName&&function(t,e){return typeof e.getElementsByClassName!==V&&O?e.getElementsByClassName(t):void 0},L=[],P=[],(x.qsa=mt.test(i.querySelectorAll))&&(s(function(t){t.innerHTML="<select msallowclip=''><option selected=''></option></select>",t.querySelectorAll("[msallowclip^='']").length&&P.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||P.push("\\["+nt+"*(?:value|"+it+")"),t.querySelectorAll(":checked").length||P.push(":checked")}),s(function(t){var e=i.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&P.push("name"+nt+"*[*^$|!~]?="),t.querySelectorAll(":enabled").length||P.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),P.push(",.*:")})),(x.matchesSelector=mt.test(M=H.matches||H.webkitMatchesSelector||H.mozMatchesSelector||H.oMatchesSelector||H.msMatchesSelector))&&s(function(t){x.disconnectedMatch=M.call(t,"div"),M.call(t,"[s!='']:x"),L.push("!=",at)}),P=P.length&&new RegExp(P.join("|")),L=L.length&&new RegExp(L.join("|")),e=mt.test(H.compareDocumentPosition),z=e||mt.test(H.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},U=e?function(t,e){if(t===e)return A=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!x.sortDetached&&e.compareDocumentPosition(t)===n?t===i||t.ownerDocument===F&&z(F,t)?-1:e===i||e.ownerDocument===F&&z(F,e)?1:N?et.call(N,t)-et.call(N,e):0:4&n?-1:1)}:function(t,e){if(t===e)return A=!0,0;var n,s=0,r=t.parentNode,a=e.parentNode,l=[t],c=[e];if(!r||!a)return t===i?-1:e===i?1:r?-1:a?1:N?et.call(N,t)-et.call(N,e):0;if(r===a)return o(t,e);for(n=t;n=n.parentNode;)l.unshift(n);for(n=e;n=n.parentNode;)c.unshift(n);for(;l[s]===c[s];)s++;return s?o(l[s],c[s]):l[s]===F?-1:c[s]===F?1:0},i):D},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==D&&j(t),i=i.replace(dt,"='$1']"),x.matchesSelector&&O&&(!L||!L.test(i))&&(!P||!P.test(i)))try{var n=M.call(t,i);if(n||x.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(s){}return e(i,D,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==D&&j(t),z(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==D&&j(t);var i=T.attrHandle[e.toLowerCase()],n=i&&J.call(T.attrHandle,e.toLowerCase())?i(t,e,!O):void 0;return void 0!==n?n:x.attributes||!O?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],n=0,s=0;if(A=!x.detectDuplicates,N=!x.sortStable&&t.slice(0),t.sort(U),A){for(;e=t[s++];)e===t[s]&&(n=i.push(s));for(;n--;)t.splice(i[n],1)}return N=null,t},k=e.getText=function(t){var e,i="",n=0,s=t.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=k(t)}else if(3===s||4===s)return t.nodeValue}else for(;e=t[n++];)i+=k(e);return i},T=e.selectors={cacheLength:50,createPseudo:n,match:ft,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(xt,Tt),t[3]=(t[3]||t[4]||t[5]||"").replace(xt,Tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return ft.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&ht.test(i)&&(e=C(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(xt,Tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||typeof t.getAttribute!==V&&t.getAttribute("class")||"")})},ATTR:function(t,i,n){return function(s){var r=e.attr(s,t);return null==r?"!="===i:i?(r+="","="===i?r===n:"!="===i?r!==n:"^="===i?n&&0===r.indexOf(n):"*="===i?n&&r.indexOf(n)>-1:"$="===i?n&&r.slice(-n.length)===n:"~="===i?(" "+r+" ").indexOf(n)>-1:"|="===i?r===n||r.slice(0,n.length+1)===n+"-":!1):!0}},CHILD:function(t,e,i,n,s){var r="nth"!==t.slice(0,3),o="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===s?function(t){return!!t.parentNode}:function(e,i,l){var c,u,d,h,p,f,g=r!==o?"nextSibling":"previousSibling",v=e.parentNode,m=a&&e.nodeName.toLowerCase(),y=!l&&!a;if(v){if(r){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===m:1===d.nodeType)return!1;f=g="only"===t&&!f&&"nextSibling"}return!0}if(f=[o?v.firstChild:v.lastChild],o&&y){for(u=v[q]||(v[q]={}),c=u[t]||[],p=c[0]===I&&c[1],h=c[0]===I&&c[2],d=p&&v.childNodes[p];d=++p&&d&&d[g]||(h=p=0)||f.pop();)if(1===d.nodeType&&++h&&d===e){u[t]=[I,p,h];break}}else if(y&&(c=(e[q]||(e[q]={}))[t])&&c[0]===I)h=c[1];else for(;(d=++p&&d&&d[g]||(h=p=0)||f.pop())&&((a?d.nodeName.toLowerCase()!==m:1!==d.nodeType)||!++h||(y&&((d[q]||(d[q]={}))[t]=[I,h]),d!==e)););return h-=s,h===n||h%n===0&&h/n>=0}}},PSEUDO:function(t,i){var s,r=T.pseudos[t]||T.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return r[q]?r(i):r.length>1?(s=[t,t,"",i],T.setFilters.hasOwnProperty(t.toLowerCase())?n(function(t,e){for(var n,s=r(t,i),o=s.length;o--;)n=et.call(t,s[o]),t[n]=!(e[n]=s[o])}):function(t){return r(t,0,s)}):r}},pseudos:{not:n(function(t){var e=[],i=[],s=S(t.replace(lt,"$1"));return s[q]?n(function(t,e,i,n){for(var r,o=s(t,null,n,[]),a=t.length;a--;)(r=o[a])&&(t[a]=!(e[a]=r))}):function(t,n,r){return e[0]=t,s(e,null,r,i),!i.pop()}}),has:n(function(t){return function(i){return e(t,i).length>0}}),contains:n(function(t){return function(e){return(e.textContent||e.innerText||k(e)).indexOf(t)>-1}}),lang:n(function(t){return pt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(xt,Tt).toLowerCase(),function(e){var i;do if(i=O?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return i=i.toLowerCase(),i===t||0===i.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===H},focus:function(t){return t===D.activeElement&&(!D.hasFocus||D.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:function(t){return t.disabled===!1},disabled:function(t){return t.disabled===!0},checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!T.pseudos.empty(t)},header:function(t){return vt.test(t.nodeName)},input:function(t){return gt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,i){return[0>i?i+e:i]}),even:c(function(t,e){for(var i=0;e>i;i+=2)t.push(i);return t}),odd:c(function(t,e){for(var i=1;e>i;i+=2)t.push(i);return t}),lt:c(function(t,e,i){for(var n=0>i?i+e:i;--n>=0;)t.push(n);return t}),gt:c(function(t,e,i){for(var n=0>i?i+e:i;++n<e;)t.push(n);return t})}},T.pseudos.nth=T.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[b]=a(b);for(b in{submit:!0,reset:!0})T.pseudos[b]=l(b);return d.prototype=T.filters=T.pseudos,T.setFilters=new d,C=e.tokenize=function(t,i){var n,s,r,o,a,l,c,u=B[t+" "];if(u)return i?0:u.slice(0);for(a=t,l=[],c=T.preFilter;a;){(!n||(s=ct.exec(a)))&&(s&&(a=a.slice(s[0].length)||a),l.push(r=[])),n=!1,(s=ut.exec(a))&&(n=s.shift(),r.push({value:n,type:s[0].replace(lt," ")}),a=a.slice(n.length));for(o in T.filter)!(s=ft[o].exec(a))||c[o]&&!(s=c[o](s))||(n=s.shift(),r.push({value:n,type:o,matches:s
}),a=a.slice(n.length));if(!n)break}return i?a.length:a?e.error(t):B(t,l).slice(0)},S=e.compile=function(t,e){var i,n=[],s=[],r=X[t+" "];if(!r){for(e||(e=C(t)),i=e.length;i--;)r=y(e[i]),r[q]?n.push(r):s.push(r);r=X(t,w(s,n)),r.selector=t}return r},$=e.select=function(t,e,i,n){var s,r,o,a,l,c="function"==typeof t&&t,d=!n&&C(t=c.selector||t);if(i=i||[],1===d.length){if(r=d[0]=d[0].slice(0),r.length>2&&"ID"===(o=r[0]).type&&x.getById&&9===e.nodeType&&O&&T.relative[r[1].type]){if(e=(T.find.ID(o.matches[0].replace(xt,Tt),e)||[])[0],!e)return i;c&&(e=e.parentNode),t=t.slice(r.shift().value.length)}for(s=ft.needsContext.test(t)?0:r.length;s--&&(o=r[s],!T.relative[a=o.type]);)if((l=T.find[a])&&(n=l(o.matches[0].replace(xt,Tt),wt.test(r[0].type)&&u(e.parentNode)||e))){if(r.splice(s,1),t=n.length&&h(r),!t)return K.apply(i,n),i;break}}return(c||S(t,d))(n,e,!O,i,wt.test(t)&&u(e.parentNode)||e),i},x.sortStable=q.split("").sort(U).join("")===q,x.detectDuplicates=!!A,j(),x.sortDetached=s(function(t){return 1&t.compareDocumentPosition(D.createElement("div"))}),s(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||r("type|href|height|width",function(t,e,i){return i?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),x.attributes&&s(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||r("value",function(t,e,i){return i||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),s(function(t){return null==t.getAttribute("disabled")})||r(it,function(t,e,i){var n;return i?void 0:t[e]===!0?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),e}(t);st.find=ct,st.expr=ct.selectors,st.expr[":"]=st.expr.pseudos,st.unique=ct.uniqueSort,st.text=ct.getText,st.isXMLDoc=ct.isXML,st.contains=ct.contains;var ut=st.expr.match.needsContext,dt=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,ht=/^.[^:#\[\.,]*$/;st.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?st.find.matchesSelector(n,t)?[n]:[]:st.find.matches(t,st.grep(e,function(t){return 1===t.nodeType}))},st.fn.extend({find:function(t){var e,i=[],n=this,s=n.length;if("string"!=typeof t)return this.pushStack(st(t).filter(function(){for(e=0;s>e;e++)if(st.contains(n[e],this))return!0}));for(e=0;s>e;e++)st.find(t,n[e],i);return i=this.pushStack(s>1?st.unique(i):i),i.selector=this.selector?this.selector+" "+t:t,i},filter:function(t){return this.pushStack(n(this,t||[],!1))},not:function(t){return this.pushStack(n(this,t||[],!0))},is:function(t){return!!n(this,"string"==typeof t&&ut.test(t)?st(t):t||[],!1).length}});var pt,ft=t.document,gt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,vt=st.fn.init=function(t,e){var i,n;if(!t)return this;if("string"==typeof t){if(i="<"===t.charAt(0)&&">"===t.charAt(t.length-1)&&t.length>=3?[null,t,null]:gt.exec(t),!i||!i[1]&&e)return!e||e.jquery?(e||pt).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof st?e[0]:e,st.merge(this,st.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:ft,!0)),dt.test(i[1])&&st.isPlainObject(e))for(i in e)st.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}if(n=ft.getElementById(i[2]),n&&n.parentNode){if(n.id!==i[2])return pt.find(t);this.length=1,this[0]=n}return this.context=ft,this.selector=t,this}return t.nodeType?(this.context=this[0]=t,this.length=1,this):st.isFunction(t)?"undefined"!=typeof pt.ready?pt.ready(t):t(st):(void 0!==t.selector&&(this.selector=t.selector,this.context=t.context),st.makeArray(t,this))};vt.prototype=st.fn,pt=st(ft);var mt=/^(?:parents|prev(?:Until|All))/,yt={children:!0,contents:!0,next:!0,prev:!0};st.extend({dir:function(t,e,i){for(var n=[],s=t[e];s&&9!==s.nodeType&&(void 0===i||1!==s.nodeType||!st(s).is(i));)1===s.nodeType&&n.push(s),s=s[e];return n},sibling:function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i}}),st.fn.extend({has:function(t){var e,i=st(t,this),n=i.length;return this.filter(function(){for(e=0;n>e;e++)if(st.contains(this,i[e]))return!0})},closest:function(t,e){for(var i,n=0,s=this.length,r=[],o=ut.test(t)||"string"!=typeof t?st(t,e||this.context):0;s>n;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(o?o.index(i)>-1:1===i.nodeType&&st.find.matchesSelector(i,t))){r.push(i);break}return this.pushStack(r.length>1?st.unique(r):r)},index:function(t){return t?"string"==typeof t?st.inArray(this[0],st(t)):st.inArray(t.jquery?t[0]:t,this):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(st.unique(st.merge(this.get(),st(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),st.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return st.dir(t,"parentNode")},parentsUntil:function(t,e,i){return st.dir(t,"parentNode",i)},next:function(t){return s(t,"nextSibling")},prev:function(t){return s(t,"previousSibling")},nextAll:function(t){return st.dir(t,"nextSibling")},prevAll:function(t){return st.dir(t,"previousSibling")},nextUntil:function(t,e,i){return st.dir(t,"nextSibling",i)},prevUntil:function(t,e,i){return st.dir(t,"previousSibling",i)},siblings:function(t){return st.sibling((t.parentNode||{}).firstChild,t)},children:function(t){return st.sibling(t.firstChild)},contents:function(t){return st.nodeName(t,"iframe")?t.contentDocument||t.contentWindow.document:st.merge([],t.childNodes)}},function(t,e){st.fn[t]=function(i,n){var s=st.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(s=st.filter(n,s)),this.length>1&&(yt[t]||(s=st.unique(s)),mt.test(t)&&(s=s.reverse())),this.pushStack(s)}});var wt=/\S+/g,bt={};st.Callbacks=function(t){t="string"==typeof t?bt[t]||r(t):st.extend({},t);var e,i,n,s,o,a,l=[],c=!t.once&&[],u=function(r){for(i=t.memory&&r,n=!0,o=a||0,a=0,s=l.length,e=!0;l&&s>o;o++)if(l[o].apply(r[0],r[1])===!1&&t.stopOnFalse){i=!1;break}e=!1,l&&(c?c.length&&u(c.shift()):i?l=[]:d.disable())},d={add:function(){if(l){var n=l.length;!function r(e){st.each(e,function(e,i){var n=st.type(i);"function"===n?t.unique&&d.has(i)||l.push(i):i&&i.length&&"string"!==n&&r(i)})}(arguments),e?s=l.length:i&&(a=n,u(i))}return this},remove:function(){return l&&st.each(arguments,function(t,i){for(var n;(n=st.inArray(i,l,n))>-1;)l.splice(n,1),e&&(s>=n&&s--,o>=n&&o--)}),this},has:function(t){return t?st.inArray(t,l)>-1:!(!l||!l.length)},empty:function(){return l=[],s=0,this},disable:function(){return l=c=i=void 0,this},disabled:function(){return!l},lock:function(){return c=void 0,i||d.disable(),this},locked:function(){return!c},fireWith:function(t,i){return!l||n&&!c||(i=i||[],i=[t,i.slice?i.slice():i],e?c.push(i):u(i)),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!n}};return d},st.extend({Deferred:function(t){var e=[["resolve","done",st.Callbacks("once memory"),"resolved"],["reject","fail",st.Callbacks("once memory"),"rejected"],["notify","progress",st.Callbacks("memory")]],i="pending",n={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},then:function(){var t=arguments;return st.Deferred(function(i){st.each(e,function(e,r){var o=st.isFunction(t[e])&&t[e];s[r[1]](function(){var t=o&&o.apply(this,arguments);t&&st.isFunction(t.promise)?t.promise().done(i.resolve).fail(i.reject).progress(i.notify):i[r[0]+"With"](this===n?i.promise():this,o?[t]:arguments)})}),t=null}).promise()},promise:function(t){return null!=t?st.extend(t,n):n}},s={};return n.pipe=n.then,st.each(e,function(t,r){var o=r[2],a=r[3];n[r[1]]=o.add,a&&o.add(function(){i=a},e[1^t][2].disable,e[2][2].lock),s[r[0]]=function(){return s[r[0]+"With"](this===s?n:this,arguments),this},s[r[0]+"With"]=o.fireWith}),n.promise(s),t&&t.call(s,s),s},when:function(t){var e,i,n,s=0,r=J.call(arguments),o=r.length,a=1!==o||t&&st.isFunction(t.promise)?o:0,l=1===a?t:st.Deferred(),c=function(t,i,n){return function(s){i[t]=this,n[t]=arguments.length>1?J.call(arguments):s,n===e?l.notifyWith(i,n):--a||l.resolveWith(i,n)}};if(o>1)for(e=new Array(o),i=new Array(o),n=new Array(o);o>s;s++)r[s]&&st.isFunction(r[s].promise)?r[s].promise().done(c(s,n,r)).fail(l.reject).progress(c(s,i,e)):--a;return a||l.resolveWith(n,r),l.promise()}});var xt;st.fn.ready=function(t){return st.ready.promise().done(t),this},st.extend({isReady:!1,readyWait:1,holdReady:function(t){t?st.readyWait++:st.ready(!0)},ready:function(t){if(t===!0?!--st.readyWait:!st.isReady){if(!ft.body)return setTimeout(st.ready);st.isReady=!0,t!==!0&&--st.readyWait>0||(xt.resolveWith(ft,[st]),st.fn.triggerHandler&&(st(ft).triggerHandler("ready"),st(ft).off("ready")))}}}),st.ready.promise=function(e){if(!xt)if(xt=st.Deferred(),"complete"===ft.readyState)setTimeout(st.ready);else if(ft.addEventListener)ft.addEventListener("DOMContentLoaded",a,!1),t.addEventListener("load",a,!1);else{ft.attachEvent("onreadystatechange",a),t.attachEvent("onload",a);var i=!1;try{i=null==t.frameElement&&ft.documentElement}catch(n){}i&&i.doScroll&&!function s(){if(!st.isReady){try{i.doScroll("left")}catch(t){return setTimeout(s,50)}o(),st.ready()}}()}return xt.promise(e)};var Tt,kt="undefined";for(Tt in st(it))break;it.ownLast="0"!==Tt,it.inlineBlockNeedsLayout=!1,st(function(){var t,e,i,n;i=ft.getElementsByTagName("body")[0],i&&i.style&&(e=ft.createElement("div"),n=ft.createElement("div"),n.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",i.appendChild(n).appendChild(e),typeof e.style.zoom!==kt&&(e.style.cssText="display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1",it.inlineBlockNeedsLayout=t=3===e.offsetWidth,t&&(i.style.zoom=1)),i.removeChild(n))}),function(){var t=ft.createElement("div");if(null==it.deleteExpando){it.deleteExpando=!0;try{delete t.test}catch(e){it.deleteExpando=!1}}t=null}(),st.acceptData=function(t){var e=st.noData[(t.nodeName+" ").toLowerCase()],i=+t.nodeType||1;return 1!==i&&9!==i?!1:!e||e!==!0&&t.getAttribute("classid")===e};var _t=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ct=/([A-Z])/g;st.extend({cache:{},noData:{"applet ":!0,"embed ":!0,"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function(t){return t=t.nodeType?st.cache[t[st.expando]]:t[st.expando],!!t&&!c(t)},data:function(t,e,i){return u(t,e,i)},removeData:function(t,e){return d(t,e)},_data:function(t,e,i){return u(t,e,i,!0)},_removeData:function(t,e){return d(t,e,!0)}}),st.fn.extend({data:function(t,e){var i,n,s,r=this[0],o=r&&r.attributes;if(void 0===t){if(this.length&&(s=st.data(r),1===r.nodeType&&!st._data(r,"parsedAttrs"))){for(i=o.length;i--;)o[i]&&(n=o[i].name,0===n.indexOf("data-")&&(n=st.camelCase(n.slice(5)),l(r,n,s[n])));st._data(r,"parsedAttrs",!0)}return s}return"object"==typeof t?this.each(function(){st.data(this,t)}):arguments.length>1?this.each(function(){st.data(this,t,e)}):r?l(r,t,st.data(r,t)):void 0},removeData:function(t){return this.each(function(){st.removeData(this,t)})}}),st.extend({queue:function(t,e,i){var n;return t?(e=(e||"fx")+"queue",n=st._data(t,e),i&&(!n||st.isArray(i)?n=st._data(t,e,st.makeArray(i)):n.push(i)),n||[]):void 0},dequeue:function(t,e){e=e||"fx";var i=st.queue(t,e),n=i.length,s=i.shift(),r=st._queueHooks(t,e),o=function(){st.dequeue(t,e)};"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===e&&i.unshift("inprogress"),delete r.stop,s.call(t,o,r)),!n&&r&&r.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return st._data(t,i)||st._data(t,i,{empty:st.Callbacks("once memory").add(function(){st._removeData(t,e+"queue"),st._removeData(t,i)})})}}),st.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?st.queue(this[0],t):void 0===e?this:this.each(function(){var i=st.queue(this,t,e);st._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&st.dequeue(this,t)})},dequeue:function(t){return this.each(function(){st.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,s=st.Deferred(),r=this,o=this.length,a=function(){--n||s.resolveWith(r,[r])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)i=st._data(r[o],t+"queueHooks"),i&&i.empty&&(n++,i.empty.add(a));return a(),s.promise(e)}});var St=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,$t=["Top","Right","Bottom","Left"],Et=function(t,e){return t=e||t,"none"===st.css(t,"display")||!st.contains(t.ownerDocument,t)},Nt=st.access=function(t,e,i,n,s,r,o){var a=0,l=t.length,c=null==i;if("object"===st.type(i)){s=!0;for(a in i)st.access(t,e,a,i[a],!0,r,o)}else if(void 0!==n&&(s=!0,st.isFunction(n)||(o=!0),c&&(o?(e.call(t,n),e=null):(c=e,e=function(t,e,i){return c.call(st(t),i)})),e))for(;l>a;a++)e(t[a],i,o?n:n.call(t[a],a,e(t[a],i)));return s?t:c?e.call(t):l?e(t[0],i):r},At=/^(?:checkbox|radio)$/i;!function(){var t=ft.createElement("input"),e=ft.createElement("div"),i=ft.createDocumentFragment();if(e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",it.leadingWhitespace=3===e.firstChild.nodeType,it.tbody=!e.getElementsByTagName("tbody").length,it.htmlSerialize=!!e.getElementsByTagName("link").length,it.html5Clone="<:nav></:nav>"!==ft.createElement("nav").cloneNode(!0).outerHTML,t.type="checkbox",t.checked=!0,i.appendChild(t),it.appendChecked=t.checked,e.innerHTML="<textarea>x</textarea>",it.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue,i.appendChild(e),e.innerHTML="<input type='radio' checked='checked' name='t'/>",it.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,it.noCloneEvent=!0,e.attachEvent&&(e.attachEvent("onclick",function(){it.noCloneEvent=!1}),e.cloneNode(!0).click()),null==it.deleteExpando){it.deleteExpando=!0;try{delete e.test}catch(n){it.deleteExpando=!1}}}(),function(){var e,i,n=ft.createElement("div");for(e in{submit:!0,change:!0,focusin:!0})i="on"+e,(it[e+"Bubbles"]=i in t)||(n.setAttribute(i,"t"),it[e+"Bubbles"]=n.attributes[i].expando===!1);n=null}();var jt=/^(?:input|select|textarea)$/i,Dt=/^key/,Ht=/^(?:mouse|pointer|contextmenu)|click/,Ot=/^(?:focusinfocus|focusoutblur)$/,Pt=/^([^.]*)(?:\.(.+)|)$/;st.event={global:{},add:function(t,e,i,n,s){var r,o,a,l,c,u,d,h,p,f,g,v=st._data(t);if(v){for(i.handler&&(l=i,i=l.handler,s=l.selector),i.guid||(i.guid=st.guid++),(o=v.events)||(o=v.events={}),(u=v.handle)||(u=v.handle=function(t){return typeof st===kt||t&&st.event.triggered===t.type?void 0:st.event.dispatch.apply(u.elem,arguments)},u.elem=t),e=(e||"").match(wt)||[""],a=e.length;a--;)r=Pt.exec(e[a])||[],p=g=r[1],f=(r[2]||"").split(".").sort(),p&&(c=st.event.special[p]||{},p=(s?c.delegateType:c.bindType)||p,c=st.event.special[p]||{},d=st.extend({type:p,origType:g,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&st.expr.match.needsContext.test(s),namespace:f.join(".")},l),(h=o[p])||(h=o[p]=[],h.delegateCount=0,c.setup&&c.setup.call(t,n,f,u)!==!1||(t.addEventListener?t.addEventListener(p,u,!1):t.attachEvent&&t.attachEvent("on"+p,u))),c.add&&(c.add.call(t,d),d.handler.guid||(d.handler.guid=i.guid)),s?h.splice(h.delegateCount++,0,d):h.push(d),st.event.global[p]=!0);t=null}},remove:function(t,e,i,n,s){var r,o,a,l,c,u,d,h,p,f,g,v=st.hasData(t)&&st._data(t);if(v&&(u=v.events)){for(e=(e||"").match(wt)||[""],c=e.length;c--;)if(a=Pt.exec(e[c])||[],p=g=a[1],f=(a[2]||"").split(".").sort(),p){for(d=st.event.special[p]||{},p=(n?d.delegateType:d.bindType)||p,h=u[p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),l=r=h.length;r--;)o=h[r],!s&&g!==o.origType||i&&i.guid!==o.guid||a&&!a.test(o.namespace)||n&&n!==o.selector&&("**"!==n||!o.selector)||(h.splice(r,1),o.selector&&h.delegateCount--,d.remove&&d.remove.call(t,o));l&&!h.length&&(d.teardown&&d.teardown.call(t,f,v.handle)!==!1||st.removeEvent(t,p,v.handle),delete u[p])}else for(p in u)st.event.remove(t,p+e[c],i,n,!0);st.isEmptyObject(u)&&(delete v.handle,st._removeData(t,"events"))}},trigger:function(e,i,n,s){var r,o,a,l,c,u,d,h=[n||ft],p=et.call(e,"type")?e.type:e,f=et.call(e,"namespace")?e.namespace.split("."):[];if(a=u=n=n||ft,3!==n.nodeType&&8!==n.nodeType&&!Ot.test(p+st.event.triggered)&&(p.indexOf(".")>=0&&(f=p.split("."),p=f.shift(),f.sort()),o=p.indexOf(":")<0&&"on"+p,e=e[st.expando]?e:new st.Event(p,"object"==typeof e&&e),e.isTrigger=s?2:3,e.namespace=f.join("."),e.namespace_re=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),i=null==i?[e]:st.makeArray(i,[e]),c=st.event.special[p]||{},s||!c.trigger||c.trigger.apply(n,i)!==!1)){if(!s&&!c.noBubble&&!st.isWindow(n)){for(l=c.delegateType||p,Ot.test(l+p)||(a=a.parentNode);a;a=a.parentNode)h.push(a),u=a;u===(n.ownerDocument||ft)&&h.push(u.defaultView||u.parentWindow||t)}for(d=0;(a=h[d++])&&!e.isPropagationStopped();)e.type=d>1?l:c.bindType||p,r=(st._data(a,"events")||{})[e.type]&&st._data(a,"handle"),r&&r.apply(a,i),r=o&&a[o],r&&r.apply&&st.acceptData(a)&&(e.result=r.apply(a,i),e.result===!1&&e.preventDefault());if(e.type=p,!s&&!e.isDefaultPrevented()&&(!c._default||c._default.apply(h.pop(),i)===!1)&&st.acceptData(n)&&o&&n[p]&&!st.isWindow(n)){u=n[o],u&&(n[o]=null),st.event.triggered=p;try{n[p]()}catch(g){}st.event.triggered=void 0,u&&(n[o]=u)}return e.result}},dispatch:function(t){t=st.event.fix(t);var e,i,n,s,r,o=[],a=J.call(arguments),l=(st._data(this,"events")||{})[t.type]||[],c=st.event.special[t.type]||{};if(a[0]=t,t.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,t)!==!1){for(o=st.event.handlers.call(this,t,l),e=0;(s=o[e++])&&!t.isPropagationStopped();)for(t.currentTarget=s.elem,r=0;(n=s.handlers[r++])&&!t.isImmediatePropagationStopped();)(!t.namespace_re||t.namespace_re.test(n.namespace))&&(t.handleObj=n,t.data=n.data,i=((st.event.special[n.origType]||{}).handle||n.handler).apply(s.elem,a),void 0!==i&&(t.result=i)===!1&&(t.preventDefault(),t.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(t,e){var i,n,s,r,o=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&(!t.button||"click"!==t.type))for(;l!=this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==t.type)){for(s=[],r=0;a>r;r++)n=e[r],i=n.selector+" ",void 0===s[i]&&(s[i]=n.needsContext?st(i,this).index(l)>=0:st.find(i,this,null,[l]).length),s[i]&&s.push(n);s.length&&o.push({elem:l,handlers:s})}return a<e.length&&o.push({elem:this,handlers:e.slice(a)}),o},fix:function(t){if(t[st.expando])return t;var e,i,n,s=t.type,r=t,o=this.fixHooks[s];for(o||(this.fixHooks[s]=o=Ht.test(s)?this.mouseHooks:Dt.test(s)?this.keyHooks:{}),n=o.props?this.props.concat(o.props):this.props,t=new st.Event(r),e=n.length;e--;)i=n[e],t[i]=r[i];return t.target||(t.target=r.srcElement||ft),3===t.target.nodeType&&(t.target=t.target.parentNode),t.metaKey=!!t.metaKey,o.filter?o.filter(t,r):t},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(t,e){return null==t.which&&(t.which=null!=e.charCode?e.charCode:e.keyCode),t}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(t,e){var i,n,s,r=e.button,o=e.fromElement;return null==t.pageX&&null!=e.clientX&&(n=t.target.ownerDocument||ft,s=n.documentElement,i=n.body,t.pageX=e.clientX+(s&&s.scrollLeft||i&&i.scrollLeft||0)-(s&&s.clientLeft||i&&i.clientLeft||0),t.pageY=e.clientY+(s&&s.scrollTop||i&&i.scrollTop||0)-(s&&s.clientTop||i&&i.clientTop||0)),!t.relatedTarget&&o&&(t.relatedTarget=o===t.target?e.toElement:o),t.which||void 0===r||(t.which=1&r?1:2&r?3:4&r?2:0),t}},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==f()&&this.focus)try{return this.focus(),!1}catch(t){}},delegateType:"focusin"},blur:{trigger:function(){return this===f()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return st.nodeName(this,"input")&&"checkbox"===this.type&&this.click?(this.click(),!1):void 0},_default:function(t){return st.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}},simulate:function(t,e,i,n){var s=st.extend(new st.Event,i,{type:t,isSimulated:!0,originalEvent:{}});n?st.event.trigger(s,null,e):st.event.dispatch.call(e,s),s.isDefaultPrevented()&&i.preventDefault()}},st.removeEvent=ft.removeEventListener?function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i,!1)}:function(t,e,i){var n="on"+e;t.detachEvent&&(typeof t[n]===kt&&(t[n]=null),t.detachEvent(n,i))},st.Event=function(t,e){return this instanceof st.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?h:p):this.type=t,e&&st.extend(this,e),this.timeStamp=t&&t.timeStamp||st.now(),void(this[st.expando]=!0)):new st.Event(t,e)},st.Event.prototype={isDefaultPrevented:p,isPropagationStopped:p,isImmediatePropagationStopped:p,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=h,t&&(t.preventDefault?t.preventDefault():t.returnValue=!1)},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=h,t&&(t.stopPropagation&&t.stopPropagation(),t.cancelBubble=!0)},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=h,t&&t.stopImmediatePropagation&&t.stopImmediatePropagation(),this.stopPropagation()}},st.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){st.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,s=t.relatedTarget,r=t.handleObj;return(!s||s!==n&&!st.contains(n,s))&&(t.type=r.origType,i=r.handler.apply(this,arguments),t.type=e),i}}}),it.submitBubbles||(st.event.special.submit={setup:function(){return st.nodeName(this,"form")?!1:void st.event.add(this,"click._submit keypress._submit",function(t){var e=t.target,i=st.nodeName(e,"input")||st.nodeName(e,"button")?e.form:void 0;i&&!st._data(i,"submitBubbles")&&(st.event.add(i,"submit._submit",function(t){t._submit_bubble=!0}),st._data(i,"submitBubbles",!0))})},postDispatch:function(t){t._submit_bubble&&(delete t._submit_bubble,this.parentNode&&!t.isTrigger&&st.event.simulate("submit",this.parentNode,t,!0))},teardown:function(){return st.nodeName(this,"form")?!1:void st.event.remove(this,"._submit")}}),it.changeBubbles||(st.event.special.change={setup:function(){return jt.test(this.nodeName)?(("checkbox"===this.type||"radio"===this.type)&&(st.event.add(this,"propertychange._change",function(t){"checked"===t.originalEvent.propertyName&&(this._just_changed=!0)}),st.event.add(this,"click._change",function(t){this._just_changed&&!t.isTrigger&&(this._just_changed=!1),st.event.simulate("change",this,t,!0)})),!1):void st.event.add(this,"beforeactivate._change",function(t){var e=t.target;jt.test(e.nodeName)&&!st._data(e,"changeBubbles")&&(st.event.add(e,"change._change",function(t){!this.parentNode||t.isSimulated||t.isTrigger||st.event.simulate("change",this.parentNode,t,!0)}),st._data(e,"changeBubbles",!0))})},handle:function(t){var e=t.target;return this!==e||t.isSimulated||t.isTrigger||"radio"!==e.type&&"checkbox"!==e.type?t.handleObj.handler.apply(this,arguments):void 0},teardown:function(){return st.event.remove(this,"._change"),!jt.test(this.nodeName)}}),it.focusinBubbles||st.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){st.event.simulate(e,t.target,st.event.fix(t),!0)};st.event.special[e]={setup:function(){var n=this.ownerDocument||this,s=st._data(n,e);s||n.addEventListener(t,i,!0),st._data(n,e,(s||0)+1)},teardown:function(){var n=this.ownerDocument||this,s=st._data(n,e)-1;s?st._data(n,e,s):(n.removeEventListener(t,i,!0),st._removeData(n,e))}}}),st.fn.extend({on:function(t,e,i,n,s){var r,o;if("object"==typeof t){"string"!=typeof e&&(i=i||e,e=void 0);for(r in t)this.on(r,e,i,t[r],s);return this}if(null==i&&null==n?(n=e,i=e=void 0):null==n&&("string"==typeof e?(n=i,i=void 0):(n=i,i=e,e=void 0)),n===!1)n=p;else if(!n)return this;return 1===s&&(o=n,n=function(t){return st().off(t),o.apply(this,arguments)},n.guid=o.guid||(o.guid=st.guid++)),this.each(function(){st.event.add(this,t,n,i,e)})},one:function(t,e,i,n){return this.on(t,e,i,n,1)},off:function(t,e,i){var n,s;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,st(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(s in t)this.off(s,e,t[s]);return this}return(e===!1||"function"==typeof e)&&(i=e,e=void 0),i===!1&&(i=p),this.each(function(){st.event.remove(this,t,i,e)})},trigger:function(t,e){return this.each(function(){st.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];return i?st.event.trigger(t,e,i,!0):void 0}});var Lt="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",Mt=/ jQuery\d+="(?:null|\d+)"/g,zt=new RegExp("<(?:"+Lt+")[\\s/>]","i"),qt=/^\s+/,Ft=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,It=/<([\w:]+)/,Rt=/<tbody/i,Wt=/<|&#?\w+;/,Bt=/<(?:script|style|link)/i,Xt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ut=/^$|\/(?:java|ecma)script/i,Vt=/^true\/(.*)/,Yt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,Jt={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:it.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},Qt=g(ft),Gt=Qt.appendChild(ft.createElement("div"));Jt.optgroup=Jt.option,Jt.tbody=Jt.tfoot=Jt.colgroup=Jt.caption=Jt.thead,Jt.th=Jt.td,st.extend({clone:function(t,e,i){var n,s,r,o,a,l=st.contains(t.ownerDocument,t);if(it.html5Clone||st.isXMLDoc(t)||!zt.test("<"+t.nodeName+">")?r=t.cloneNode(!0):(Gt.innerHTML=t.outerHTML,Gt.removeChild(r=Gt.firstChild)),!(it.noCloneEvent&&it.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||st.isXMLDoc(t)))for(n=v(r),a=v(t),o=0;null!=(s=a[o]);++o)n[o]&&k(s,n[o]);if(e)if(i)for(a=a||v(t),n=n||v(r),o=0;null!=(s=a[o]);o++)T(s,n[o]);else T(t,r);return n=v(r,"script"),n.length>0&&x(n,!l&&v(t,"script")),n=a=s=null,r},buildFragment:function(t,e,i,n){for(var s,r,o,a,l,c,u,d=t.length,h=g(e),p=[],f=0;d>f;f++)if(r=t[f],r||0===r)if("object"===st.type(r))st.merge(p,r.nodeType?[r]:r);else if(Wt.test(r)){for(a=a||h.appendChild(e.createElement("div")),l=(It.exec(r)||["",""])[1].toLowerCase(),u=Jt[l]||Jt._default,a.innerHTML=u[1]+r.replace(Ft,"<$1></$2>")+u[2],s=u[0];s--;)a=a.lastChild;if(!it.leadingWhitespace&&qt.test(r)&&p.push(e.createTextNode(qt.exec(r)[0])),!it.tbody)for(r="table"!==l||Rt.test(r)?"<table>"!==u[1]||Rt.test(r)?0:a:a.firstChild,s=r&&r.childNodes.length;s--;)st.nodeName(c=r.childNodes[s],"tbody")&&!c.childNodes.length&&r.removeChild(c);for(st.merge(p,a.childNodes),a.textContent="";a.firstChild;)a.removeChild(a.firstChild);a=h.lastChild}else p.push(e.createTextNode(r));for(a&&h.removeChild(a),it.appendChecked||st.grep(v(p,"input"),m),f=0;r=p[f++];)if((!n||-1===st.inArray(r,n))&&(o=st.contains(r.ownerDocument,r),a=v(h.appendChild(r),"script"),o&&x(a),i))for(s=0;r=a[s++];)Ut.test(r.type||"")&&i.push(r);return a=null,h},cleanData:function(t,e){for(var i,n,s,r,o=0,a=st.expando,l=st.cache,c=it.deleteExpando,u=st.event.special;null!=(i=t[o]);o++)if((e||st.acceptData(i))&&(s=i[a],r=s&&l[s])){if(r.events)for(n in r.events)u[n]?st.event.remove(i,n):st.removeEvent(i,n,r.handle);l[s]&&(delete l[s],c?delete i[a]:typeof i.removeAttribute!==kt?i.removeAttribute(a):i[a]=null,Y.push(s))}}}),st.fn.extend({text:function(t){return Nt(this,function(t){return void 0===t?st.text(this):this.empty().append((this[0]&&this[0].ownerDocument||ft).createTextNode(t))},null,t,arguments.length)},append:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=y(this,t);e.appendChild(t)}})},prepend:function(){return this.domManip(arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=y(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return this.domManip(arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},remove:function(t,e){for(var i,n=t?st.filter(t,this):this,s=0;null!=(i=n[s]);s++)e||1!==i.nodeType||st.cleanData(v(i)),i.parentNode&&(e&&st.contains(i.ownerDocument,i)&&x(v(i,"script")),i.parentNode.removeChild(i));return this},empty:function(){for(var t,e=0;null!=(t=this[e]);e++){for(1===t.nodeType&&st.cleanData(v(t,!1));t.firstChild;)t.removeChild(t.firstChild);t.options&&st.nodeName(t,"select")&&(t.options.length=0)}return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return st.clone(this,t,e)})},html:function(t){return Nt(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t)return 1===e.nodeType?e.innerHTML.replace(Mt,""):void 0;if("string"==typeof t&&!Bt.test(t)&&(it.htmlSerialize||!zt.test(t))&&(it.leadingWhitespace||!qt.test(t))&&!Jt[(It.exec(t)||["",""])[1].toLowerCase()]){t=t.replace(Ft,"<$1></$2>");try{for(;n>i;i++)e=this[i]||{},1===e.nodeType&&(st.cleanData(v(e,!1)),e.innerHTML=t);e=0}catch(s){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=arguments[0];return this.domManip(arguments,function(e){t=this.parentNode,st.cleanData(v(this)),t&&t.replaceChild(e,this)}),t&&(t.length||t.nodeType)?this:this.remove()},detach:function(t){return this.remove(t,!0)},domManip:function(t,e){t=Q.apply([],t);var i,n,s,r,o,a,l=0,c=this.length,u=this,d=c-1,h=t[0],p=st.isFunction(h);if(p||c>1&&"string"==typeof h&&!it.checkClone&&Xt.test(h))return this.each(function(i){var n=u.eq(i);p&&(t[0]=h.call(this,i,n.html())),n.domManip(t,e)});if(c&&(a=st.buildFragment(t,this[0].ownerDocument,!1,this),i=a.firstChild,1===a.childNodes.length&&(a=i),i)){for(r=st.map(v(a,"script"),w),s=r.length;c>l;l++)n=a,l!==d&&(n=st.clone(n,!0,!0),s&&st.merge(r,v(n,"script"))),e.call(this[l],n,l);if(s)for(o=r[r.length-1].ownerDocument,st.map(r,b),l=0;s>l;l++)n=r[l],Ut.test(n.type||"")&&!st._data(n,"globalEval")&&st.contains(o,n)&&(n.src?st._evalUrl&&st._evalUrl(n.src):st.globalEval((n.text||n.textContent||n.innerHTML||"").replace(Yt,"")));a=i=null}return this}}),st.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){st.fn[t]=function(t){for(var i,n=0,s=[],r=st(t),o=r.length-1;o>=n;n++)i=n===o?this:this.clone(!0),st(r[n])[e](i),G.apply(s,i.get());return this.pushStack(s)}});var Zt,Kt={};!function(){var t;it.shrinkWrapBlocks=function(){if(null!=t)return t;t=!1;var e,i,n;return i=ft.getElementsByTagName("body")[0],i&&i.style?(e=ft.createElement("div"),n=ft.createElement("div"),n.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",i.appendChild(n).appendChild(e),typeof e.style.zoom!==kt&&(e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:1px;width:1px;zoom:1",e.appendChild(ft.createElement("div")).style.width="5px",t=3!==e.offsetWidth),i.removeChild(n),t):void 0}}();var te,ee,ie=/^margin/,ne=new RegExp("^("+St+")(?!px)[a-z%]+$","i"),se=/^(top|right|bottom|left)$/;t.getComputedStyle?(te=function(t){return t.ownerDocument.defaultView.getComputedStyle(t,null)},ee=function(t,e,i){var n,s,r,o,a=t.style;return i=i||te(t),o=i?i.getPropertyValue(e)||i[e]:void 0,i&&(""!==o||st.contains(t.ownerDocument,t)||(o=st.style(t,e)),ne.test(o)&&ie.test(e)&&(n=a.width,s=a.minWidth,r=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=i.width,a.width=n,a.minWidth=s,a.maxWidth=r)),
void 0===o?o:o+""}):ft.documentElement.currentStyle&&(te=function(t){return t.currentStyle},ee=function(t,e,i){var n,s,r,o,a=t.style;return i=i||te(t),o=i?i[e]:void 0,null==o&&a&&a[e]&&(o=a[e]),ne.test(o)&&!se.test(e)&&(n=a.left,s=t.runtimeStyle,r=s&&s.left,r&&(s.left=t.currentStyle.left),a.left="fontSize"===e?"1em":o,o=a.pixelLeft+"px",a.left=n,r&&(s.left=r)),void 0===o?o:o+""||"auto"}),function(){function e(){var e,i,n,s;i=ft.getElementsByTagName("body")[0],i&&i.style&&(e=ft.createElement("div"),n=ft.createElement("div"),n.style.cssText="position:absolute;border:0;width:0;height:0;top:0;left:-9999px",i.appendChild(n).appendChild(e),e.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",r=o=!1,l=!0,t.getComputedStyle&&(r="1%"!==(t.getComputedStyle(e,null)||{}).top,o="4px"===(t.getComputedStyle(e,null)||{width:"4px"}).width,s=e.appendChild(ft.createElement("div")),s.style.cssText=e.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",s.style.marginRight=s.style.width="0",e.style.width="1px",l=!parseFloat((t.getComputedStyle(s,null)||{}).marginRight)),e.innerHTML="<table><tr><td></td><td>t</td></tr></table>",s=e.getElementsByTagName("td"),s[0].style.cssText="margin:0;border:0;padding:0;display:none",a=0===s[0].offsetHeight,a&&(s[0].style.display="",s[1].style.display="none",a=0===s[0].offsetHeight),i.removeChild(n))}var i,n,s,r,o,a,l;i=ft.createElement("div"),i.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",s=i.getElementsByTagName("a")[0],n=s&&s.style,n&&(n.cssText="float:left;opacity:.5",it.opacity="0.5"===n.opacity,it.cssFloat=!!n.cssFloat,i.style.backgroundClip="content-box",i.cloneNode(!0).style.backgroundClip="",it.clearCloneStyle="content-box"===i.style.backgroundClip,it.boxSizing=""===n.boxSizing||""===n.MozBoxSizing||""===n.WebkitBoxSizing,st.extend(it,{reliableHiddenOffsets:function(){return null==a&&e(),a},boxSizingReliable:function(){return null==o&&e(),o},pixelPosition:function(){return null==r&&e(),r},reliableMarginRight:function(){return null==l&&e(),l}}))}(),st.swap=function(t,e,i,n){var s,r,o={};for(r in e)o[r]=t.style[r],t.style[r]=e[r];s=i.apply(t,n||[]);for(r in e)t.style[r]=o[r];return s};var re=/alpha\([^)]*\)/i,oe=/opacity\s*=\s*([^)]*)/,ae=/^(none|table(?!-c[ea]).+)/,le=new RegExp("^("+St+")(.*)$","i"),ce=new RegExp("^([+-])=("+St+")","i"),ue={position:"absolute",visibility:"hidden",display:"block"},de={letterSpacing:"0",fontWeight:"400"},he=["Webkit","O","Moz","ms"];st.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=ee(t,"opacity");return""===i?"1":i}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":it.cssFloat?"cssFloat":"styleFloat"},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var s,r,o,a=st.camelCase(e),l=t.style;if(e=st.cssProps[a]||(st.cssProps[a]=$(l,a)),o=st.cssHooks[e]||st.cssHooks[a],void 0===i)return o&&"get"in o&&void 0!==(s=o.get(t,!1,n))?s:l[e];if(r=typeof i,"string"===r&&(s=ce.exec(i))&&(i=(s[1]+1)*s[2]+parseFloat(st.css(t,e)),r="number"),null!=i&&i===i&&("number"!==r||st.cssNumber[a]||(i+="px"),it.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),!(o&&"set"in o&&void 0===(i=o.set(t,i,n)))))try{l[e]=i}catch(c){}}},css:function(t,e,i,n){var s,r,o,a=st.camelCase(e);return e=st.cssProps[a]||(st.cssProps[a]=$(t.style,a)),o=st.cssHooks[e]||st.cssHooks[a],o&&"get"in o&&(r=o.get(t,!0,i)),void 0===r&&(r=ee(t,e,n)),"normal"===r&&e in de&&(r=de[e]),""===i||i?(s=parseFloat(r),i===!0||st.isNumeric(s)?s||0:r):r}}),st.each(["height","width"],function(t,e){st.cssHooks[e]={get:function(t,i,n){return i?ae.test(st.css(t,"display"))&&0===t.offsetWidth?st.swap(t,ue,function(){return j(t,e,n)}):j(t,e,n):void 0},set:function(t,i,n){var s=n&&te(t);return N(t,i,n?A(t,e,n,it.boxSizing&&"border-box"===st.css(t,"boxSizing",!1,s),s):0)}}}),it.opacity||(st.cssHooks.opacity={get:function(t,e){return oe.test((e&&t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":e?"1":""},set:function(t,e){var i=t.style,n=t.currentStyle,s=st.isNumeric(e)?"alpha(opacity="+100*e+")":"",r=n&&n.filter||i.filter||"";i.zoom=1,(e>=1||""===e)&&""===st.trim(r.replace(re,""))&&i.removeAttribute&&(i.removeAttribute("filter"),""===e||n&&!n.filter)||(i.filter=re.test(r)?r.replace(re,s):r+" "+s)}}),st.cssHooks.marginRight=S(it.reliableMarginRight,function(t,e){return e?st.swap(t,{display:"inline-block"},ee,[t,"marginRight"]):void 0}),st.each({margin:"",padding:"",border:"Width"},function(t,e){st.cssHooks[t+e]={expand:function(i){for(var n=0,s={},r="string"==typeof i?i.split(" "):[i];4>n;n++)s[t+$t[n]+e]=r[n]||r[n-2]||r[0];return s}},ie.test(t)||(st.cssHooks[t+e].set=N)}),st.fn.extend({css:function(t,e){return Nt(this,function(t,e,i){var n,s,r={},o=0;if(st.isArray(e)){for(n=te(t),s=e.length;s>o;o++)r[e[o]]=st.css(t,e[o],!1,n);return r}return void 0!==i?st.style(t,e,i):st.css(t,e)},t,e,arguments.length>1)},show:function(){return E(this,!0)},hide:function(){return E(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Et(this)?st(this).show():st(this).hide()})}}),st.Tween=D,D.prototype={constructor:D,init:function(t,e,i,n,s,r){this.elem=t,this.prop=i,this.easing=s||"swing",this.options=e,this.start=this.now=this.cur(),this.end=n,this.unit=r||(st.cssNumber[i]?"":"px")},cur:function(){var t=D.propHooks[this.prop];return t&&t.get?t.get(this):D.propHooks._default.get(this)},run:function(t){var e,i=D.propHooks[this.prop];return this.options.duration?this.pos=e=st.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):D.propHooks._default.set(this),this}},D.prototype.init.prototype=D.prototype,D.propHooks={_default:{get:function(t){var e;return null==t.elem[t.prop]||t.elem.style&&null!=t.elem.style[t.prop]?(e=st.css(t.elem,t.prop,""),e&&"auto"!==e?e:0):t.elem[t.prop]},set:function(t){st.fx.step[t.prop]?st.fx.step[t.prop](t):t.elem.style&&(null!=t.elem.style[st.cssProps[t.prop]]||st.cssHooks[t.prop])?st.style(t.elem,t.prop,t.now+t.unit):t.elem[t.prop]=t.now}}},D.propHooks.scrollTop=D.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},st.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2}},st.fx=D.prototype.init,st.fx.step={};var pe,fe,ge=/^(?:toggle|show|hide)$/,ve=new RegExp("^(?:([+-])=|)("+St+")([a-z%]*)$","i"),me=/queueHooks$/,ye=[L],we={"*":[function(t,e){var i=this.createTween(t,e),n=i.cur(),s=ve.exec(e),r=s&&s[3]||(st.cssNumber[t]?"":"px"),o=(st.cssNumber[t]||"px"!==r&&+n)&&ve.exec(st.css(i.elem,t)),a=1,l=20;if(o&&o[3]!==r){r=r||o[3],s=s||[],o=+n||1;do a=a||".5",o/=a,st.style(i.elem,t,o+r);while(a!==(a=i.cur()/n)&&1!==a&&--l)}return s&&(o=i.start=+o||+n||0,i.unit=r,i.end=s[1]?o+(s[1]+1)*s[2]:+s[2]),i}]};st.Animation=st.extend(z,{tweener:function(t,e){st.isFunction(t)?(e=t,t=["*"]):t=t.split(" ");for(var i,n=0,s=t.length;s>n;n++)i=t[n],we[i]=we[i]||[],we[i].unshift(e)},prefilter:function(t,e){e?ye.unshift(t):ye.push(t)}}),st.speed=function(t,e,i){var n=t&&"object"==typeof t?st.extend({},t):{complete:i||!i&&e||st.isFunction(t)&&t,duration:t,easing:i&&e||e&&!st.isFunction(e)&&e};return n.duration=st.fx.off?0:"number"==typeof n.duration?n.duration:n.duration in st.fx.speeds?st.fx.speeds[n.duration]:st.fx.speeds._default,(null==n.queue||n.queue===!0)&&(n.queue="fx"),n.old=n.complete,n.complete=function(){st.isFunction(n.old)&&n.old.call(this),n.queue&&st.dequeue(this,n.queue)},n},st.fn.extend({fadeTo:function(t,e,i,n){return this.filter(Et).css("opacity",0).show().end().animate({opacity:e},t,i,n)},animate:function(t,e,i,n){var s=st.isEmptyObject(t),r=st.speed(e,i,n),o=function(){var e=z(this,st.extend({},t),r);(s||st._data(this,"finish"))&&e.stop(!0)};return o.finish=o,s||r.queue===!1?this.each(o):this.queue(r.queue,o)},stop:function(t,e,i){var n=function(t){var e=t.stop;delete t.stop,e(i)};return"string"!=typeof t&&(i=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,s=null!=t&&t+"queueHooks",r=st.timers,o=st._data(this);if(s)o[s]&&o[s].stop&&n(o[s]);else for(s in o)o[s]&&o[s].stop&&me.test(s)&&n(o[s]);for(s=r.length;s--;)r[s].elem!==this||null!=t&&r[s].queue!==t||(r[s].anim.stop(i),e=!1,r.splice(s,1));(e||!i)&&st.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,i=st._data(this),n=i[t+"queue"],s=i[t+"queueHooks"],r=st.timers,o=n?n.length:0;for(i.finish=!0,st.queue(this,t,[]),s&&s.stop&&s.stop.call(this,!0),e=r.length;e--;)r[e].elem===this&&r[e].queue===t&&(r[e].anim.stop(!0),r.splice(e,1));for(e=0;o>e;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete i.finish})}}),st.each(["toggle","show","hide"],function(t,e){var i=st.fn[e];st.fn[e]=function(t,n,s){return null==t||"boolean"==typeof t?i.apply(this,arguments):this.animate(O(e,!0),t,n,s)}}),st.each({slideDown:O("show"),slideUp:O("hide"),slideToggle:O("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){st.fn[t]=function(t,i,n){return this.animate(e,t,i,n)}}),st.timers=[],st.fx.tick=function(){var t,e=st.timers,i=0;for(pe=st.now();i<e.length;i++)t=e[i],t()||e[i]!==t||e.splice(i--,1);e.length||st.fx.stop(),pe=void 0},st.fx.timer=function(t){st.timers.push(t),t()?st.fx.start():st.timers.pop()},st.fx.interval=13,st.fx.start=function(){fe||(fe=setInterval(st.fx.tick,st.fx.interval))},st.fx.stop=function(){clearInterval(fe),fe=null},st.fx.speeds={slow:600,fast:200,_default:400},st.fn.delay=function(t,e){return t=st.fx?st.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,i){var n=setTimeout(e,t);i.stop=function(){clearTimeout(n)}})},function(){var t,e,i,n,s;e=ft.createElement("div"),e.setAttribute("className","t"),e.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",n=e.getElementsByTagName("a")[0],i=ft.createElement("select"),s=i.appendChild(ft.createElement("option")),t=e.getElementsByTagName("input")[0],n.style.cssText="top:1px",it.getSetAttribute="t"!==e.className,it.style=/top/.test(n.getAttribute("style")),it.hrefNormalized="/a"===n.getAttribute("href"),it.checkOn=!!t.value,it.optSelected=s.selected,it.enctype=!!ft.createElement("form").enctype,i.disabled=!0,it.optDisabled=!s.disabled,t=ft.createElement("input"),t.setAttribute("value",""),it.input=""===t.getAttribute("value"),t.value="t",t.setAttribute("type","radio"),it.radioValue="t"===t.value}();var be=/\r/g;st.fn.extend({val:function(t){var e,i,n,s=this[0];{if(arguments.length)return n=st.isFunction(t),this.each(function(i){var s;1===this.nodeType&&(s=n?t.call(this,i,st(this).val()):t,null==s?s="":"number"==typeof s?s+="":st.isArray(s)&&(s=st.map(s,function(t){return null==t?"":t+""})),e=st.valHooks[this.type]||st.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,s,"value")||(this.value=s))});if(s)return e=st.valHooks[s.type]||st.valHooks[s.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(i=e.get(s,"value"))?i:(i=s.value,"string"==typeof i?i.replace(be,""):null==i?"":i)}}}),st.extend({valHooks:{option:{get:function(t){var e=st.find.attr(t,"value");return null!=e?e:st.trim(st.text(t))}},select:{get:function(t){for(var e,i,n=t.options,s=t.selectedIndex,r="select-one"===t.type||0>s,o=r?null:[],a=r?s+1:n.length,l=0>s?a:r?s:0;a>l;l++)if(i=n[l],(i.selected||l===s)&&(it.optDisabled?!i.disabled:null===i.getAttribute("disabled"))&&(!i.parentNode.disabled||!st.nodeName(i.parentNode,"optgroup"))){if(e=st(i).val(),r)return e;o.push(e)}return o},set:function(t,e){for(var i,n,s=t.options,r=st.makeArray(e),o=s.length;o--;)if(n=s[o],st.inArray(st.valHooks.option.get(n),r)>=0)try{n.selected=i=!0}catch(a){n.scrollHeight}else n.selected=!1;return i||(t.selectedIndex=-1),s}}}}),st.each(["radio","checkbox"],function(){st.valHooks[this]={set:function(t,e){return st.isArray(e)?t.checked=st.inArray(st(t).val(),e)>=0:void 0}},it.checkOn||(st.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var xe,Te,ke=st.expr.attrHandle,_e=/^(?:checked|selected)$/i,Ce=it.getSetAttribute,Se=it.input;st.fn.extend({attr:function(t,e){return Nt(this,st.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){st.removeAttr(this,t)})}}),st.extend({attr:function(t,e,i){var n,s,r=t.nodeType;if(t&&3!==r&&8!==r&&2!==r)return typeof t.getAttribute===kt?st.prop(t,e,i):(1===r&&st.isXMLDoc(t)||(e=e.toLowerCase(),n=st.attrHooks[e]||(st.expr.match.bool.test(e)?Te:xe)),void 0===i?n&&"get"in n&&null!==(s=n.get(t,e))?s:(s=st.find.attr(t,e),null==s?void 0:s):null!==i?n&&"set"in n&&void 0!==(s=n.set(t,i,e))?s:(t.setAttribute(e,i+""),i):void st.removeAttr(t,e))},removeAttr:function(t,e){var i,n,s=0,r=e&&e.match(wt);if(r&&1===t.nodeType)for(;i=r[s++];)n=st.propFix[i]||i,st.expr.match.bool.test(i)?Se&&Ce||!_e.test(i)?t[n]=!1:t[st.camelCase("default-"+i)]=t[n]=!1:st.attr(t,i,""),t.removeAttribute(Ce?i:n)},attrHooks:{type:{set:function(t,e){if(!it.radioValue&&"radio"===e&&st.nodeName(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}}}),Te={set:function(t,e,i){return e===!1?st.removeAttr(t,i):Se&&Ce||!_e.test(i)?t.setAttribute(!Ce&&st.propFix[i]||i,i):t[st.camelCase("default-"+i)]=t[i]=!0,i}},st.each(st.expr.match.bool.source.match(/\w+/g),function(t,e){var i=ke[e]||st.find.attr;ke[e]=Se&&Ce||!_e.test(e)?function(t,e,n){var s,r;return n||(r=ke[e],ke[e]=s,s=null!=i(t,e,n)?e.toLowerCase():null,ke[e]=r),s}:function(t,e,i){return i?void 0:t[st.camelCase("default-"+e)]?e.toLowerCase():null}}),Se&&Ce||(st.attrHooks.value={set:function(t,e,i){return st.nodeName(t,"input")?void(t.defaultValue=e):xe&&xe.set(t,e,i)}}),Ce||(xe={set:function(t,e,i){var n=t.getAttributeNode(i);return n||t.setAttributeNode(n=t.ownerDocument.createAttribute(i)),n.value=e+="","value"===i||e===t.getAttribute(i)?e:void 0}},ke.id=ke.name=ke.coords=function(t,e,i){var n;return i?void 0:(n=t.getAttributeNode(e))&&""!==n.value?n.value:null},st.valHooks.button={get:function(t,e){var i=t.getAttributeNode(e);return i&&i.specified?i.value:void 0},set:xe.set},st.attrHooks.contenteditable={set:function(t,e,i){xe.set(t,""===e?!1:e,i)}},st.each(["width","height"],function(t,e){st.attrHooks[e]={set:function(t,i){return""===i?(t.setAttribute(e,"auto"),i):void 0}}})),it.style||(st.attrHooks.style={get:function(t){return t.style.cssText||void 0},set:function(t,e){return t.style.cssText=e+""}});var $e=/^(?:input|select|textarea|button|object)$/i,Ee=/^(?:a|area)$/i;st.fn.extend({prop:function(t,e){return Nt(this,st.prop,t,e,arguments.length>1)},removeProp:function(t){return t=st.propFix[t]||t,this.each(function(){try{this[t]=void 0,delete this[t]}catch(e){}})}}),st.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(t,e,i){var n,s,r,o=t.nodeType;if(t&&3!==o&&8!==o&&2!==o)return r=1!==o||!st.isXMLDoc(t),r&&(e=st.propFix[e]||e,s=st.propHooks[e]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(t,i,e))?n:t[e]=i:s&&"get"in s&&null!==(n=s.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=st.find.attr(t,"tabindex");return e?parseInt(e,10):$e.test(t.nodeName)||Ee.test(t.nodeName)&&t.href?0:-1}}}}),it.hrefNormalized||st.each(["href","src"],function(t,e){st.propHooks[e]={get:function(t){return t.getAttribute(e,4)}}}),it.optSelected||(st.propHooks.selected={get:function(t){var e=t.parentNode;return e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex),null}}),st.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){st.propFix[this.toLowerCase()]=this}),it.enctype||(st.propFix.enctype="encoding");var Ne=/[\t\r\n\f]/g;st.fn.extend({addClass:function(t){var e,i,n,s,r,o,a=0,l=this.length,c="string"==typeof t&&t;if(st.isFunction(t))return this.each(function(e){st(this).addClass(t.call(this,e,this.className))});if(c)for(e=(t||"").match(wt)||[];l>a;a++)if(i=this[a],n=1===i.nodeType&&(i.className?(" "+i.className+" ").replace(Ne," "):" ")){for(r=0;s=e[r++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");o=st.trim(n),i.className!==o&&(i.className=o)}return this},removeClass:function(t){var e,i,n,s,r,o,a=0,l=this.length,c=0===arguments.length||"string"==typeof t&&t;if(st.isFunction(t))return this.each(function(e){st(this).removeClass(t.call(this,e,this.className))});if(c)for(e=(t||"").match(wt)||[];l>a;a++)if(i=this[a],n=1===i.nodeType&&(i.className?(" "+i.className+" ").replace(Ne," "):"")){for(r=0;s=e[r++];)for(;n.indexOf(" "+s+" ")>=0;)n=n.replace(" "+s+" "," ");o=t?st.trim(n):"",i.className!==o&&(i.className=o)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):st.isFunction(t)?this.each(function(i){st(this).toggleClass(t.call(this,i,this.className,e),e)}):this.each(function(){if("string"===i)for(var e,n=0,s=st(this),r=t.match(wt)||[];e=r[n++];)s.hasClass(e)?s.removeClass(e):s.addClass(e);else(i===kt||"boolean"===i)&&(this.className&&st._data(this,"__className__",this.className),this.className=this.className||t===!1?"":st._data(this,"__className__")||"")})},hasClass:function(t){for(var e=" "+t+" ",i=0,n=this.length;n>i;i++)if(1===this[i].nodeType&&(" "+this[i].className+" ").replace(Ne," ").indexOf(e)>=0)return!0;return!1}}),st.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(t,e){st.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),st.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)},bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,n){return this.on(e,t,i,n)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}});var Ae=st.now(),je=/\?/,De=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;st.parseJSON=function(e){if(t.JSON&&t.JSON.parse)return t.JSON.parse(e+"");var i,n=null,s=st.trim(e+"");return s&&!st.trim(s.replace(De,function(t,e,s,r){return i&&e&&(n=0),0===n?t:(i=s||e,n+=!r-!s,"")}))?Function("return "+s)():st.error("Invalid JSON: "+e)},st.parseXML=function(e){var i,n;if(!e||"string"!=typeof e)return null;try{t.DOMParser?(n=new DOMParser,i=n.parseFromString(e,"text/xml")):(i=new ActiveXObject("Microsoft.XMLDOM"),i.async="false",i.loadXML(e))}catch(s){i=void 0}return i&&i.documentElement&&!i.getElementsByTagName("parsererror").length||st.error("Invalid XML: "+e),i};var He,Oe,Pe=/#.*$/,Le=/([?&])_=[^&]*/,Me=/^(.*?):[ \t]*([^\r\n]*)\r?$/gm,ze=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,qe=/^(?:GET|HEAD)$/,Fe=/^\/\//,Ie=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,Re={},We={},Be="*/".concat("*");try{Oe=location.href}catch(Xe){Oe=ft.createElement("a"),Oe.href="",Oe=Oe.href}He=Ie.exec(Oe.toLowerCase())||[],st.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Oe,type:"GET",isLocal:ze.test(He[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":st.parseJSON,"text xml":st.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?I(I(t,st.ajaxSettings),e):I(st.ajaxSettings,t)},ajaxPrefilter:q(Re),ajaxTransport:q(We),ajax:function(t,e){function i(t,e,i,n){var s,u,m,y,b,T=e;2!==w&&(w=2,a&&clearTimeout(a),c=void 0,o=n||"",x.readyState=t>0?4:0,s=t>=200&&300>t||304===t,i&&(y=R(d,x,i)),y=W(d,y,x,s),s?(d.ifModified&&(b=x.getResponseHeader("Last-Modified"),b&&(st.lastModified[r]=b),b=x.getResponseHeader("etag"),b&&(st.etag[r]=b)),204===t||"HEAD"===d.type?T="nocontent":304===t?T="notmodified":(T=y.state,u=y.data,m=y.error,s=!m)):(m=T,(t||!T)&&(T="error",0>t&&(t=0))),x.status=t,x.statusText=(e||T)+"",s?f.resolveWith(h,[u,T,x]):f.rejectWith(h,[x,T,m]),x.statusCode(v),v=void 0,l&&p.trigger(s?"ajaxSuccess":"ajaxError",[x,d,s?u:m]),g.fireWith(h,[x,T]),l&&(p.trigger("ajaxComplete",[x,d]),--st.active||st.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,s,r,o,a,l,c,u,d=st.ajaxSetup({},e),h=d.context||d,p=d.context&&(h.nodeType||h.jquery)?st(h):st.event,f=st.Deferred(),g=st.Callbacks("once memory"),v=d.statusCode||{},m={},y={},w=0,b="canceled",x={readyState:0,getResponseHeader:function(t){var e;if(2===w){if(!u)for(u={};e=Me.exec(o);)u[e[1].toLowerCase()]=e[2];e=u[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return 2===w?o:null},setRequestHeader:function(t,e){var i=t.toLowerCase();return w||(t=y[i]=y[i]||t,m[t]=e),this},overrideMimeType:function(t){return w||(d.mimeType=t),this},statusCode:function(t){var e;if(t)if(2>w)for(e in t)v[e]=[v[e],t[e]];else x.always(t[x.status]);return this},abort:function(t){var e=t||b;return c&&c.abort(e),i(0,e),this}};if(f.promise(x).complete=g.add,x.success=x.done,x.error=x.fail,d.url=((t||d.url||Oe)+"").replace(Pe,"").replace(Fe,He[1]+"//"),d.type=e.method||e.type||d.method||d.type,d.dataTypes=st.trim(d.dataType||"*").toLowerCase().match(wt)||[""],null==d.crossDomain&&(n=Ie.exec(d.url.toLowerCase()),d.crossDomain=!(!n||n[1]===He[1]&&n[2]===He[2]&&(n[3]||("http:"===n[1]?"80":"443"))===(He[3]||("http:"===He[1]?"80":"443")))),d.data&&d.processData&&"string"!=typeof d.data&&(d.data=st.param(d.data,d.traditional)),F(Re,d,e,x),2===w)return x;l=d.global,l&&0===st.active++&&st.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!qe.test(d.type),r=d.url,d.hasContent||(d.data&&(r=d.url+=(je.test(r)?"&":"?")+d.data,delete d.data),d.cache===!1&&(d.url=Le.test(r)?r.replace(Le,"$1_="+Ae++):r+(je.test(r)?"&":"?")+"_="+Ae++)),d.ifModified&&(st.lastModified[r]&&x.setRequestHeader("If-Modified-Since",st.lastModified[r]),st.etag[r]&&x.setRequestHeader("If-None-Match",st.etag[r])),(d.data&&d.hasContent&&d.contentType!==!1||e.contentType)&&x.setRequestHeader("Content-Type",d.contentType),x.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Be+"; q=0.01":""):d.accepts["*"]);for(s in d.headers)x.setRequestHeader(s,d.headers[s]);if(d.beforeSend&&(d.beforeSend.call(h,x,d)===!1||2===w))return x.abort();b="abort";for(s in{success:1,error:1,complete:1})x[s](d[s]);if(c=F(We,d,e,x)){x.readyState=1,l&&p.trigger("ajaxSend",[x,d]),d.async&&d.timeout>0&&(a=setTimeout(function(){x.abort("timeout")},d.timeout));try{w=1,c.send(m,i)}catch(T){if(!(2>w))throw T;i(-1,T)}}else i(-1,"No Transport");return x},getJSON:function(t,e,i){return st.get(t,e,i,"json")},getScript:function(t,e){return st.get(t,void 0,e,"script")}}),st.each(["get","post"],function(t,e){st[e]=function(t,i,n,s){return st.isFunction(i)&&(s=s||n,n=i,i=void 0),st.ajax({url:t,type:e,dataType:s,data:i,success:n})}}),st.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){st.fn[e]=function(t){return this.on(e,t)}}),st._evalUrl=function(t){return st.ajax({url:t,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},st.fn.extend({wrapAll:function(t){if(st.isFunction(t))return this.each(function(e){st(this).wrapAll(t.call(this,e))});if(this[0]){var e=st(t,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstChild&&1===t.firstChild.nodeType;)t=t.firstChild;return t}).append(this)}return this},wrapInner:function(t){return st.isFunction(t)?this.each(function(e){st(this).wrapInner(t.call(this,e))}):this.each(function(){var e=st(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=st.isFunction(t);return this.each(function(i){st(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(){return this.parent().each(function(){st.nodeName(this,"body")||st(this).replaceWith(this.childNodes)}).end()}}),st.expr.filters.hidden=function(t){return t.offsetWidth<=0&&t.offsetHeight<=0||!it.reliableHiddenOffsets()&&"none"===(t.style&&t.style.display||st.css(t,"display"))},st.expr.filters.visible=function(t){return!st.expr.filters.hidden(t)};var Ue=/%20/g,Ve=/\[\]$/,Ye=/\r?\n/g,Je=/^(?:submit|button|image|reset|file)$/i,Qe=/^(?:input|select|textarea|keygen)/i;st.param=function(t,e){var i,n=[],s=function(t,e){e=st.isFunction(e)?e():null==e?"":e,n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(e)};if(void 0===e&&(e=st.ajaxSettings&&st.ajaxSettings.traditional),st.isArray(t)||t.jquery&&!st.isPlainObject(t))st.each(t,function(){s(this.name,this.value)});else for(i in t)B(i,t[i],e,s);return n.join("&").replace(Ue,"+")},st.fn.extend({serialize:function(){return st.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=st.prop(this,"elements");return t?st.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!st(this).is(":disabled")&&Qe.test(this.nodeName)&&!Je.test(t)&&(this.checked||!At.test(t))}).map(function(t,e){var i=st(this).val();return null==i?null:st.isArray(i)?st.map(i,function(t){return{name:e.name,value:t.replace(Ye,"\r\n")}}):{name:e.name,value:i.replace(Ye,"\r\n")}}).get()}}),st.ajaxSettings.xhr=void 0!==t.ActiveXObject?function(){return!this.isLocal&&/^(get|post|head|put|delete|options)$/i.test(this.type)&&X()||U()}:X;var Ge=0,Ze={},Ke=st.ajaxSettings.xhr();t.ActiveXObject&&st(t).on("unload",function(){for(var t in Ze)Ze[t](void 0,!0)}),it.cors=!!Ke&&"withCredentials"in Ke,Ke=it.ajax=!!Ke,Ke&&st.ajaxTransport(function(t){if(!t.crossDomain||it.cors){var e;return{send:function(i,n){var s,r=t.xhr(),o=++Ge;if(r.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)r[s]=t.xhrFields[s];t.mimeType&&r.overrideMimeType&&r.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(s in i)void 0!==i[s]&&r.setRequestHeader(s,i[s]+"");r.send(t.hasContent&&t.data||null),e=function(i,s){var a,l,c;if(e&&(s||4===r.readyState))if(delete Ze[o],e=void 0,r.onreadystatechange=st.noop,s)4!==r.readyState&&r.abort();else{c={},a=r.status,"string"==typeof r.responseText&&(c.text=r.responseText);try{l=r.statusText}catch(u){l=""}a||!t.isLocal||t.crossDomain?1223===a&&(a=204):a=c.text?200:404}c&&n(a,l,c,r.getAllResponseHeaders())},t.async?4===r.readyState?setTimeout(e):r.onreadystatechange=Ze[o]=e:e()},abort:function(){e&&e(void 0,!0)}}}}),st.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(t){return st.globalEval(t),t}}}),st.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET",t.global=!1)}),st.ajaxTransport("script",function(t){if(t.crossDomain){var e,i=ft.head||st("head")[0]||ft.documentElement;return{send:function(n,s){e=ft.createElement("script"),e.async=!0,t.scriptCharset&&(e.charset=t.scriptCharset),e.src=t.url,e.onload=e.onreadystatechange=function(t,i){(i||!e.readyState||/loaded|complete/.test(e.readyState))&&(e.onload=e.onreadystatechange=null,e.parentNode&&e.parentNode.removeChild(e),e=null,i||s(200,"success"))},i.insertBefore(e,i.firstChild)},abort:function(){e&&e.onload(void 0,!0)}}}});var ti=[],ei=/(=)\?(?=&|$)|\?\?/;st.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=ti.pop()||st.expando+"_"+Ae++;return this[t]=!0,t}}),st.ajaxPrefilter("json jsonp",function(e,i,n){var s,r,o,a=e.jsonp!==!1&&(ei.test(e.url)?"url":"string"==typeof e.data&&!(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&ei.test(e.data)&&"data");return a||"jsonp"===e.dataTypes[0]?(s=e.jsonpCallback=st.isFunction(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(ei,"$1"+s):e.jsonp!==!1&&(e.url+=(je.test(e.url)?"&":"?")+e.jsonp+"="+s),e.converters["script json"]=function(){return o||st.error(s+" was not called"),o[0]},e.dataTypes[0]="json",r=t[s],t[s]=function(){o=arguments},n.always(function(){t[s]=r,e[s]&&(e.jsonpCallback=i.jsonpCallback,ti.push(s)),o&&st.isFunction(r)&&r(o[0]),o=r=void 0}),"script"):void 0}),st.parseHTML=function(t,e,i){if(!t||"string"!=typeof t)return null;"boolean"==typeof e&&(i=e,e=!1),e=e||ft;var n=dt.exec(t),s=!i&&[];return n?[e.createElement(n[1])]:(n=st.buildFragment([t],e,s),s&&s.length&&st(s).remove(),st.merge([],n.childNodes))};var ii=st.fn.load;st.fn.load=function(t,e,i){if("string"!=typeof t&&ii)return ii.apply(this,arguments);var n,s,r,o=this,a=t.indexOf(" ");return a>=0&&(n=st.trim(t.slice(a,t.length)),t=t.slice(0,a)),st.isFunction(e)?(i=e,e=void 0):e&&"object"==typeof e&&(r="POST"),o.length>0&&st.ajax({url:t,type:r,dataType:"html",data:e}).done(function(t){s=arguments,o.html(n?st("<div>").append(st.parseHTML(t)).find(n):t)}).complete(i&&function(t,e){o.each(i,s||[t.responseText,e,t])}),this},st.expr.filters.animated=function(t){return st.grep(st.timers,function(e){return t===e.elem}).length};var ni=t.document.documentElement;st.offset={setOffset:function(t,e,i){var n,s,r,o,a,l,c,u=st.css(t,"position"),d=st(t),h={};"static"===u&&(t.style.position="relative"),a=d.offset(),r=st.css(t,"top"),l=st.css(t,"left"),c=("absolute"===u||"fixed"===u)&&st.inArray("auto",[r,l])>-1,c?(n=d.position(),o=n.top,s=n.left):(o=parseFloat(r)||0,s=parseFloat(l)||0),st.isFunction(e)&&(e=e.call(t,i,a)),null!=e.top&&(h.top=e.top-a.top+o),null!=e.left&&(h.left=e.left-a.left+s),"using"in e?e.using.call(t,h):d.css(h)}},st.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){st.offset.setOffset(this,t,e)});var e,i,n={top:0,left:0},s=this[0],r=s&&s.ownerDocument;if(r)return e=r.documentElement,st.contains(e,s)?(typeof s.getBoundingClientRect!==kt&&(n=s.getBoundingClientRect()),i=V(r),{top:n.top+(i.pageYOffset||e.scrollTop)-(e.clientTop||0),left:n.left+(i.pageXOffset||e.scrollLeft)-(e.clientLeft||0)}):n},position:function(){if(this[0]){var t,e,i={top:0,left:0},n=this[0];return"fixed"===st.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),st.nodeName(t[0],"html")||(i=t.offset()),i.top+=st.css(t[0],"borderTopWidth",!0),i.left+=st.css(t[0],"borderLeftWidth",!0)),{top:e.top-i.top-st.css(n,"marginTop",!0),left:e.left-i.left-st.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent||ni;t&&!st.nodeName(t,"html")&&"static"===st.css(t,"position");)t=t.offsetParent;return t||ni})}}),st.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i=/Y/.test(e);st.fn[t]=function(n){return Nt(this,function(t,n,s){var r=V(t);return void 0===s?r?e in r?r[e]:r.document.documentElement[n]:t[n]:void(r?r.scrollTo(i?st(r).scrollLeft():s,i?s:st(r).scrollTop()):t[n]=s)},t,n,arguments.length,null)}}),st.each(["top","left"],function(t,e){st.cssHooks[e]=S(it.pixelPosition,function(t,i){return i?(i=ee(t,e),ne.test(i)?st(t).position()[e]+"px":i):void 0})}),st.each({Height:"height",Width:"width"},function(t,e){st.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){st.fn[n]=function(n,s){var r=arguments.length&&(i||"boolean"!=typeof n),o=i||(n===!0||s===!0?"margin":"border");return Nt(this,function(e,i,n){var s;return st.isWindow(e)?e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,
Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===n?st.css(e,i,o):st.style(e,i,n,o)},e,r?n:void 0,r,null)}})}),st.fn.size=function(){return this.length},st.fn.andSelf=st.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return st});var si=t.jQuery,ri=t.$;return st.noConflict=function(e){return t.$===st&&(t.$=ri),e&&t.jQuery===st&&(t.jQuery=si),st},typeof e===kt&&(t.jQuery=t.$=st),st}),function(){var t=this,e=t._,i=Array.prototype,n=Object.prototype,s=Function.prototype,r=i.push,o=i.slice,a=i.concat,l=n.toString,c=n.hasOwnProperty,u=Array.isArray,d=Object.keys,h=s.bind,p=function(t){return t instanceof p?t:this instanceof p?void(this._wrapped=t):new p(t)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=p),exports._=p):t._=p,p.VERSION="1.7.0";var f=function(t,e,i){if(void 0===e)return t;switch(null==i?3:i){case 1:return function(i){return t.call(e,i)};case 2:return function(i,n){return t.call(e,i,n)};case 3:return function(i,n,s){return t.call(e,i,n,s)};case 4:return function(i,n,s,r){return t.call(e,i,n,s,r)}}return function(){return t.apply(e,arguments)}};p.iteratee=function(t,e,i){return null==t?p.identity:p.isFunction(t)?f(t,e,i):p.isObject(t)?p.matches(t):p.property(t)},p.each=p.forEach=function(t,e,i){if(null==t)return t;e=f(e,i);var n,s=t.length;if(s===+s)for(n=0;s>n;n++)e(t[n],n,t);else{var r=p.keys(t);for(n=0,s=r.length;s>n;n++)e(t[r[n]],r[n],t)}return t},p.map=p.collect=function(t,e,i){if(null==t)return[];e=p.iteratee(e,i);for(var n,s=t.length!==+t.length&&p.keys(t),r=(s||t).length,o=Array(r),a=0;r>a;a++)n=s?s[a]:a,o[a]=e(t[n],n,t);return o};var g="Reduce of empty array with no initial value";p.reduce=p.foldl=p.inject=function(t,e,i,n){null==t&&(t=[]),e=f(e,n,4);var s,r=t.length!==+t.length&&p.keys(t),o=(r||t).length,a=0;if(arguments.length<3){if(!o)throw new TypeError(g);i=t[r?r[a++]:a++]}for(;o>a;a++)s=r?r[a]:a,i=e(i,t[s],s,t);return i},p.reduceRight=p.foldr=function(t,e,i,n){null==t&&(t=[]),e=f(e,n,4);var s,r=t.length!==+t.length&&p.keys(t),o=(r||t).length;if(arguments.length<3){if(!o)throw new TypeError(g);i=t[r?r[--o]:--o]}for(;o--;)s=r?r[o]:o,i=e(i,t[s],s,t);return i},p.find=p.detect=function(t,e,i){var n;return e=p.iteratee(e,i),p.some(t,function(t,i,s){return e(t,i,s)?(n=t,!0):void 0}),n},p.filter=p.select=function(t,e,i){var n=[];return null==t?n:(e=p.iteratee(e,i),p.each(t,function(t,i,s){e(t,i,s)&&n.push(t)}),n)},p.reject=function(t,e,i){return p.filter(t,p.negate(p.iteratee(e)),i)},p.every=p.all=function(t,e,i){if(null==t)return!0;e=p.iteratee(e,i);var n,s,r=t.length!==+t.length&&p.keys(t),o=(r||t).length;for(n=0;o>n;n++)if(s=r?r[n]:n,!e(t[s],s,t))return!1;return!0},p.some=p.any=function(t,e,i){if(null==t)return!1;e=p.iteratee(e,i);var n,s,r=t.length!==+t.length&&p.keys(t),o=(r||t).length;for(n=0;o>n;n++)if(s=r?r[n]:n,e(t[s],s,t))return!0;return!1},p.contains=p.include=function(t,e){return null==t?!1:(t.length!==+t.length&&(t=p.values(t)),p.indexOf(t,e)>=0)},p.invoke=function(t,e){var i=o.call(arguments,2),n=p.isFunction(e);return p.map(t,function(t){return(n?e:t[e]).apply(t,i)})},p.pluck=function(t,e){return p.map(t,p.property(e))},p.where=function(t,e){return p.filter(t,p.matches(e))},p.findWhere=function(t,e){return p.find(t,p.matches(e))},p.max=function(t,e,i){var n,s,r=-(1/0),o=-(1/0);if(null==e&&null!=t){t=t.length===+t.length?t:p.values(t);for(var a=0,l=t.length;l>a;a++)n=t[a],n>r&&(r=n)}else e=p.iteratee(e,i),p.each(t,function(t,i,n){s=e(t,i,n),(s>o||s===-(1/0)&&r===-(1/0))&&(r=t,o=s)});return r},p.min=function(t,e,i){var n,s,r=1/0,o=1/0;if(null==e&&null!=t){t=t.length===+t.length?t:p.values(t);for(var a=0,l=t.length;l>a;a++)n=t[a],r>n&&(r=n)}else e=p.iteratee(e,i),p.each(t,function(t,i,n){s=e(t,i,n),(o>s||s===1/0&&r===1/0)&&(r=t,o=s)});return r},p.shuffle=function(t){for(var e,i=t&&t.length===+t.length?t:p.values(t),n=i.length,s=Array(n),r=0;n>r;r++)e=p.random(0,r),e!==r&&(s[r]=s[e]),s[e]=i[r];return s},p.sample=function(t,e,i){return null==e||i?(t.length!==+t.length&&(t=p.values(t)),t[p.random(t.length-1)]):p.shuffle(t).slice(0,Math.max(0,e))},p.sortBy=function(t,e,i){return e=p.iteratee(e,i),p.pluck(p.map(t,function(t,i,n){return{value:t,index:i,criteria:e(t,i,n)}}).sort(function(t,e){var i=t.criteria,n=e.criteria;if(i!==n){if(i>n||void 0===i)return 1;if(n>i||void 0===n)return-1}return t.index-e.index}),"value")};var v=function(t){return function(e,i,n){var s={};return i=p.iteratee(i,n),p.each(e,function(n,r){var o=i(n,r,e);t(s,n,o)}),s}};p.groupBy=v(function(t,e,i){p.has(t,i)?t[i].push(e):t[i]=[e]}),p.indexBy=v(function(t,e,i){t[i]=e}),p.countBy=v(function(t,e,i){p.has(t,i)?t[i]++:t[i]=1}),p.sortedIndex=function(t,e,i,n){i=p.iteratee(i,n,1);for(var s=i(e),r=0,o=t.length;o>r;){var a=r+o>>>1;i(t[a])<s?r=a+1:o=a}return r},p.toArray=function(t){return t?p.isArray(t)?o.call(t):t.length===+t.length?p.map(t,p.identity):p.values(t):[]},p.size=function(t){return null==t?0:t.length===+t.length?t.length:p.keys(t).length},p.partition=function(t,e,i){e=p.iteratee(e,i);var n=[],s=[];return p.each(t,function(t,i,r){(e(t,i,r)?n:s).push(t)}),[n,s]},p.first=p.head=p.take=function(t,e,i){return null==t?void 0:null==e||i?t[0]:0>e?[]:o.call(t,0,e)},p.initial=function(t,e,i){return o.call(t,0,Math.max(0,t.length-(null==e||i?1:e)))},p.last=function(t,e,i){return null==t?void 0:null==e||i?t[t.length-1]:o.call(t,Math.max(t.length-e,0))},p.rest=p.tail=p.drop=function(t,e,i){return o.call(t,null==e||i?1:e)},p.compact=function(t){return p.filter(t,p.identity)};var m=function(t,e,i,n){if(e&&p.every(t,p.isArray))return a.apply(n,t);for(var s=0,o=t.length;o>s;s++){var l=t[s];p.isArray(l)||p.isArguments(l)?e?r.apply(n,l):m(l,e,i,n):i||n.push(l)}return n};p.flatten=function(t,e){return m(t,e,!1,[])},p.without=function(t){return p.difference(t,o.call(arguments,1))},p.uniq=p.unique=function(t,e,i,n){if(null==t)return[];p.isBoolean(e)||(n=i,i=e,e=!1),null!=i&&(i=p.iteratee(i,n));for(var s=[],r=[],o=0,a=t.length;a>o;o++){var l=t[o];if(e)o&&r===l||s.push(l),r=l;else if(i){var c=i(l,o,t);p.indexOf(r,c)<0&&(r.push(c),s.push(l))}else p.indexOf(s,l)<0&&s.push(l)}return s},p.union=function(){return p.uniq(m(arguments,!0,!0,[]))},p.intersection=function(t){if(null==t)return[];for(var e=[],i=arguments.length,n=0,s=t.length;s>n;n++){var r=t[n];if(!p.contains(e,r)){for(var o=1;i>o&&p.contains(arguments[o],r);o++);o===i&&e.push(r)}}return e},p.difference=function(t){var e=m(o.call(arguments,1),!0,!0,[]);return p.filter(t,function(t){return!p.contains(e,t)})},p.zip=function(t){if(null==t)return[];for(var e=p.max(arguments,"length").length,i=Array(e),n=0;e>n;n++)i[n]=p.pluck(arguments,n);return i},p.object=function(t,e){if(null==t)return{};for(var i={},n=0,s=t.length;s>n;n++)e?i[t[n]]=e[n]:i[t[n][0]]=t[n][1];return i},p.indexOf=function(t,e,i){if(null==t)return-1;var n=0,s=t.length;if(i){if("number"!=typeof i)return n=p.sortedIndex(t,e),t[n]===e?n:-1;n=0>i?Math.max(0,s+i):i}for(;s>n;n++)if(t[n]===e)return n;return-1},p.lastIndexOf=function(t,e,i){if(null==t)return-1;var n=t.length;for("number"==typeof i&&(n=0>i?n+i+1:Math.min(n,i+1));--n>=0;)if(t[n]===e)return n;return-1},p.range=function(t,e,i){arguments.length<=1&&(e=t||0,t=0),i=i||1;for(var n=Math.max(Math.ceil((e-t)/i),0),s=Array(n),r=0;n>r;r++,t+=i)s[r]=t;return s};var y=function(){};p.bind=function(t,e){var i,n;if(h&&t.bind===h)return h.apply(t,o.call(arguments,1));if(!p.isFunction(t))throw new TypeError("Bind must be called on a function");return i=o.call(arguments,2),n=function(){if(!(this instanceof n))return t.apply(e,i.concat(o.call(arguments)));y.prototype=t.prototype;var s=new y;y.prototype=null;var r=t.apply(s,i.concat(o.call(arguments)));return p.isObject(r)?r:s}},p.partial=function(t){var e=o.call(arguments,1);return function(){for(var i=0,n=e.slice(),s=0,r=n.length;r>s;s++)n[s]===p&&(n[s]=arguments[i++]);for(;i<arguments.length;)n.push(arguments[i++]);return t.apply(this,n)}},p.bindAll=function(t){var e,i,n=arguments.length;if(1>=n)throw new Error("bindAll must be passed function names");for(e=1;n>e;e++)i=arguments[e],t[i]=p.bind(t[i],t);return t},p.memoize=function(t,e){var i=function(n){var s=i.cache,r=e?e.apply(this,arguments):n;return p.has(s,r)||(s[r]=t.apply(this,arguments)),s[r]};return i.cache={},i},p.delay=function(t,e){var i=o.call(arguments,2);return setTimeout(function(){return t.apply(null,i)},e)},p.defer=function(t){return p.delay.apply(p,[t,1].concat(o.call(arguments,1)))},p.throttle=function(t,e,i){var n,s,r,o=null,a=0;i||(i={});var l=function(){a=i.leading===!1?0:p.now(),o=null,r=t.apply(n,s),o||(n=s=null)};return function(){var c=p.now();a||i.leading!==!1||(a=c);var u=e-(c-a);return n=this,s=arguments,0>=u||u>e?(clearTimeout(o),o=null,a=c,r=t.apply(n,s),o||(n=s=null)):o||i.trailing===!1||(o=setTimeout(l,u)),r}},p.debounce=function(t,e,i){var n,s,r,o,a,l=function(){var c=p.now()-o;e>c&&c>0?n=setTimeout(l,e-c):(n=null,i||(a=t.apply(r,s),n||(r=s=null)))};return function(){r=this,s=arguments,o=p.now();var c=i&&!n;return n||(n=setTimeout(l,e)),c&&(a=t.apply(r,s),r=s=null),a}},p.wrap=function(t,e){return p.partial(e,t)},p.negate=function(t){return function(){return!t.apply(this,arguments)}},p.compose=function(){var t=arguments,e=t.length-1;return function(){for(var i=e,n=t[e].apply(this,arguments);i--;)n=t[i].call(this,n);return n}},p.after=function(t,e){return function(){return--t<1?e.apply(this,arguments):void 0}},p.before=function(t,e){var i;return function(){return--t>0?i=e.apply(this,arguments):e=null,i}},p.once=p.partial(p.before,2),p.keys=function(t){if(!p.isObject(t))return[];if(d)return d(t);var e=[];for(var i in t)p.has(t,i)&&e.push(i);return e},p.values=function(t){for(var e=p.keys(t),i=e.length,n=Array(i),s=0;i>s;s++)n[s]=t[e[s]];return n},p.pairs=function(t){for(var e=p.keys(t),i=e.length,n=Array(i),s=0;i>s;s++)n[s]=[e[s],t[e[s]]];return n},p.invert=function(t){for(var e={},i=p.keys(t),n=0,s=i.length;s>n;n++)e[t[i[n]]]=i[n];return e},p.functions=p.methods=function(t){var e=[];for(var i in t)p.isFunction(t[i])&&e.push(i);return e.sort()},p.extend=function(t){if(!p.isObject(t))return t;for(var e,i,n=1,s=arguments.length;s>n;n++){e=arguments[n];for(i in e)c.call(e,i)&&(t[i]=e[i])}return t},p.pick=function(t,e,i){var n,s={};if(null==t)return s;if(p.isFunction(e)){e=f(e,i);for(n in t){var r=t[n];e(r,n,t)&&(s[n]=r)}}else{var l=a.apply([],o.call(arguments,1));t=new Object(t);for(var c=0,u=l.length;u>c;c++)n=l[c],n in t&&(s[n]=t[n])}return s},p.omit=function(t,e,i){if(p.isFunction(e))e=p.negate(e);else{var n=p.map(a.apply([],o.call(arguments,1)),String);e=function(t,e){return!p.contains(n,e)}}return p.pick(t,e,i)},p.defaults=function(t){if(!p.isObject(t))return t;for(var e=1,i=arguments.length;i>e;e++){var n=arguments[e];for(var s in n)void 0===t[s]&&(t[s]=n[s])}return t},p.clone=function(t){return p.isObject(t)?p.isArray(t)?t.slice():p.extend({},t):t},p.tap=function(t,e){return e(t),t};var w=function(t,e,i,n){if(t===e)return 0!==t||1/t===1/e;if(null==t||null==e)return t===e;t instanceof p&&(t=t._wrapped),e instanceof p&&(e=e._wrapped);var s=l.call(t);if(s!==l.call(e))return!1;switch(s){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!==+t?+e!==+e:0===+t?1/+t===1/e:+t===+e;case"[object Date]":case"[object Boolean]":return+t===+e}if("object"!=typeof t||"object"!=typeof e)return!1;for(var r=i.length;r--;)if(i[r]===t)return n[r]===e;var o=t.constructor,a=e.constructor;if(o!==a&&"constructor"in t&&"constructor"in e&&!(p.isFunction(o)&&o instanceof o&&p.isFunction(a)&&a instanceof a))return!1;i.push(t),n.push(e);var c,u;if("[object Array]"===s){if(c=t.length,u=c===e.length)for(;c--&&(u=w(t[c],e[c],i,n)););}else{var d,h=p.keys(t);if(c=h.length,u=p.keys(e).length===c)for(;c--&&(d=h[c],u=p.has(e,d)&&w(t[d],e[d],i,n)););}return i.pop(),n.pop(),u};p.isEqual=function(t,e){return w(t,e,[],[])},p.isEmpty=function(t){if(null==t)return!0;if(p.isArray(t)||p.isString(t)||p.isArguments(t))return 0===t.length;for(var e in t)if(p.has(t,e))return!1;return!0},p.isElement=function(t){return!(!t||1!==t.nodeType)},p.isArray=u||function(t){return"[object Array]"===l.call(t)},p.isObject=function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},p.each(["Arguments","Function","String","Number","Date","RegExp"],function(t){p["is"+t]=function(e){return l.call(e)==="[object "+t+"]"}}),p.isArguments(arguments)||(p.isArguments=function(t){return p.has(t,"callee")}),"function"!=typeof/./&&(p.isFunction=function(t){return"function"==typeof t||!1}),p.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},p.isNaN=function(t){return p.isNumber(t)&&t!==+t},p.isBoolean=function(t){return t===!0||t===!1||"[object Boolean]"===l.call(t)},p.isNull=function(t){return null===t},p.isUndefined=function(t){return void 0===t},p.has=function(t,e){return null!=t&&c.call(t,e)},p.noConflict=function(){return t._=e,this},p.identity=function(t){return t},p.constant=function(t){return function(){return t}},p.noop=function(){},p.property=function(t){return function(e){return e[t]}},p.matches=function(t){var e=p.pairs(t),i=e.length;return function(t){if(null==t)return!i;t=new Object(t);for(var n=0;i>n;n++){var s=e[n],r=s[0];if(s[1]!==t[r]||!(r in t))return!1}return!0}},p.times=function(t,e,i){var n=Array(Math.max(0,t));e=f(e,i,1);for(var s=0;t>s;s++)n[s]=e(s);return n},p.random=function(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))},p.now=Date.now||function(){return(new Date).getTime()};var b={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},x=p.invert(b),T=function(t){var e=function(e){return t[e]},i="(?:"+p.keys(t).join("|")+")",n=RegExp(i),s=RegExp(i,"g");return function(t){return t=null==t?"":""+t,n.test(t)?t.replace(s,e):t}};p.escape=T(b),p.unescape=T(x),p.result=function(t,e){if(null==t)return void 0;var i=t[e];return p.isFunction(i)?t[e]():i};var k=0;p.uniqueId=function(t){var e=++k+"";return t?t+e:e},p.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var _=/(.)^/,C={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},S=/\\|'|\r|\n|\u2028|\u2029/g,$=function(t){return"\\"+C[t]};p.template=function(t,e,i){!e&&i&&(e=i),e=p.defaults({},e,p.templateSettings);var n=RegExp([(e.escape||_).source,(e.interpolate||_).source,(e.evaluate||_).source].join("|")+"|$","g"),s=0,r="__p+='";t.replace(n,function(e,i,n,o,a){return r+=t.slice(s,a).replace(S,$),s=a+e.length,i?r+="'+\n((__t=("+i+"))==null?'':_.escape(__t))+\n'":n?r+="'+\n((__t=("+n+"))==null?'':__t)+\n'":o&&(r+="';\n"+o+"\n__p+='"),e}),r+="';\n",e.variable||(r="with(obj||{}){\n"+r+"}\n"),r="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+r+"return __p;\n";try{var o=new Function(e.variable||"obj","_",r)}catch(a){throw a.source=r,a}var l=function(t){return o.call(this,t,p)},c=e.variable||"obj";return l.source="function("+c+"){\n"+r+"}",l},p.chain=function(t){var e=p(t);return e._chain=!0,e};var E=function(t){return this._chain?p(t).chain():t};p.mixin=function(t){p.each(p.functions(t),function(e){var i=p[e]=t[e];p.prototype[e]=function(){var t=[this._wrapped];return r.apply(t,arguments),E.call(this,i.apply(p,t))}})},p.mixin(p),p.each(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var e=i[t];p.prototype[t]=function(){var i=this._wrapped;return e.apply(i,arguments),"shift"!==t&&"splice"!==t||0!==i.length||delete i[0],E.call(this,i)}}),p.each(["concat","join","slice"],function(t){var e=i[t];p.prototype[t]=function(){return E.call(this,e.apply(this._wrapped,arguments))}}),p.prototype.value=function(){return this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return p})}.call(this),function(t,e){if("function"==typeof define&&define.amd)define(["underscore","jquery","exports"],function(i,n,s){t.Backbone=e(t,s,i,n)});else if("undefined"!=typeof exports){var i=require("underscore");e(t,exports,i)}else t.Backbone=e(t,{},t._,t.jQuery||t.Zepto||t.ender||t.$)}(this,function(t,e,i,n){var s=t.Backbone,r=[],o=(r.push,r.slice);r.splice;e.VERSION="1.1.2",e.$=n,e.noConflict=function(){return t.Backbone=s,this},e.emulateHTTP=!1,e.emulateJSON=!1;var a=e.Events={on:function(t,e,i){if(!c(this,"on",t,[e,i])||!e)return this;this._events||(this._events={});var n=this._events[t]||(this._events[t]=[]);return n.push({callback:e,context:i,ctx:i||this}),this},once:function(t,e,n){if(!c(this,"once",t,[e,n])||!e)return this;var s=this,r=i.once(function(){s.off(t,r),e.apply(this,arguments)});return r._callback=e,this.on(t,r,n)},off:function(t,e,n){var s,r,o,a,l,u,d,h;if(!this._events||!c(this,"off",t,[e,n]))return this;if(!t&&!e&&!n)return this._events=void 0,this;for(a=t?[t]:i.keys(this._events),l=0,u=a.length;u>l;l++)if(t=a[l],o=this._events[t]){if(this._events[t]=s=[],e||n)for(d=0,h=o.length;h>d;d++)r=o[d],(e&&e!==r.callback&&e!==r.callback._callback||n&&n!==r.context)&&s.push(r);s.length||delete this._events[t]}return this},trigger:function(t){if(!this._events)return this;var e=o.call(arguments,1);if(!c(this,"trigger",t,e))return this;var i=this._events[t],n=this._events.all;return i&&u(i,e),n&&u(n,arguments),this},stopListening:function(t,e,n){var s=this._listeningTo;if(!s)return this;var r=!e&&!n;n||"object"!=typeof e||(n=this),t&&((s={})[t._listenId]=t);for(var o in s)t=s[o],t.off(e,n,this),(r||i.isEmpty(t._events))&&delete this._listeningTo[o];return this}},l=/\s+/,c=function(t,e,i,n){if(!i)return!0;if("object"==typeof i){for(var s in i)t[e].apply(t,[s,i[s]].concat(n));return!1}if(l.test(i)){for(var r=i.split(l),o=0,a=r.length;a>o;o++)t[e].apply(t,[r[o]].concat(n));return!1}return!0},u=function(t,e){var i,n=-1,s=t.length,r=e[0],o=e[1],a=e[2];switch(e.length){case 0:for(;++n<s;)(i=t[n]).callback.call(i.ctx);return;case 1:for(;++n<s;)(i=t[n]).callback.call(i.ctx,r);return;case 2:for(;++n<s;)(i=t[n]).callback.call(i.ctx,r,o);return;case 3:for(;++n<s;)(i=t[n]).callback.call(i.ctx,r,o,a);return;default:for(;++n<s;)(i=t[n]).callback.apply(i.ctx,e);return}},d={listenTo:"on",listenToOnce:"once"};i.each(d,function(t,e){a[e]=function(e,n,s){var r=this._listeningTo||(this._listeningTo={}),o=e._listenId||(e._listenId=i.uniqueId("l"));return r[o]=e,s||"object"!=typeof n||(s=this),e[t](n,s,this),this}}),a.bind=a.on,a.unbind=a.off,i.extend(e,a);var h=e.Model=function(t,e){var n=t||{};e||(e={}),this.cid=i.uniqueId("c"),this.attributes={},e.collection&&(this.collection=e.collection),e.parse&&(n=this.parse(n,e)||{}),n=i.defaults({},n,i.result(this,"defaults")),this.set(n,e),this.changed={},this.initialize.apply(this,arguments)};i.extend(h.prototype,a,{changed:null,validationError:null,idAttribute:"id",initialize:function(){},toJSON:function(t){return i.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return i.escape(this.get(t))},has:function(t){return null!=this.get(t)},set:function(t,e,n){var s,r,o,a,l,c,u,d;if(null==t)return this;if("object"==typeof t?(r=t,n=e):(r={})[t]=e,n||(n={}),!this._validate(r,n))return!1;o=n.unset,l=n.silent,a=[],c=this._changing,this._changing=!0,c||(this._previousAttributes=i.clone(this.attributes),this.changed={}),d=this.attributes,u=this._previousAttributes,this.idAttribute in r&&(this.id=r[this.idAttribute]);for(s in r)e=r[s],i.isEqual(d[s],e)||a.push(s),i.isEqual(u[s],e)?delete this.changed[s]:this.changed[s]=e,o?delete d[s]:d[s]=e;if(!l){a.length&&(this._pending=n);for(var h=0,p=a.length;p>h;h++)this.trigger("change:"+a[h],this,d[a[h]],n)}if(c)return this;if(!l)for(;this._pending;)n=this._pending,this._pending=!1,this.trigger("change",this,n);return this._pending=!1,this._changing=!1,this},unset:function(t,e){return this.set(t,void 0,i.extend({},e,{unset:!0}))},clear:function(t){var e={};for(var n in this.attributes)e[n]=void 0;return this.set(e,i.extend({},t,{unset:!0}))},hasChanged:function(t){return null==t?!i.isEmpty(this.changed):i.has(this.changed,t)},changedAttributes:function(t){if(!t)return this.hasChanged()?i.clone(this.changed):!1;var e,n=!1,s=this._changing?this._previousAttributes:this.attributes;for(var r in t)i.isEqual(s[r],e=t[r])||((n||(n={}))[r]=e);return n},previous:function(t){return null!=t&&this._previousAttributes?this._previousAttributes[t]:null},previousAttributes:function(){return i.clone(this._previousAttributes)},fetch:function(t){t=t?i.clone(t):{},void 0===t.parse&&(t.parse=!0);var e=this,n=t.success;return t.success=function(i){return e.set(e.parse(i,t),t)?(n&&n(e,i,t),void e.trigger("sync",e,i,t)):!1},M(this,t),this.sync("read",this,t)},save:function(t,e,n){var s,r,o,a=this.attributes;if(null==t||"object"==typeof t?(s=t,n=e):(s={})[t]=e,n=i.extend({validate:!0},n),s&&!n.wait){if(!this.set(s,n))return!1}else if(!this._validate(s,n))return!1;s&&n.wait&&(this.attributes=i.extend({},a,s)),void 0===n.parse&&(n.parse=!0);var l=this,c=n.success;return n.success=function(t){l.attributes=a;var e=l.parse(t,n);return n.wait&&(e=i.extend(s||{},e)),i.isObject(e)&&!l.set(e,n)?!1:(c&&c(l,t,n),void l.trigger("sync",l,t,n))},M(this,n),r=this.isNew()?"create":n.patch?"patch":"update","patch"===r&&(n.attrs=s),o=this.sync(r,this,n),s&&n.wait&&(this.attributes=a),o},destroy:function(t){t=t?i.clone(t):{};var e=this,n=t.success,s=function(){e.trigger("destroy",e,e.collection,t)};if(t.success=function(i){(t.wait||e.isNew())&&s(),n&&n(e,i,t),e.isNew()||e.trigger("sync",e,i,t)},this.isNew())return t.success(),!1;M(this,t);var r=this.sync("delete",this,t);return t.wait||s(),r},url:function(){var t=i.result(this,"urlRoot")||i.result(this.collection,"url")||L();return this.isNew()?t:t.replace(/([^\/])$/,"$1/")+encodeURIComponent(this.id)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},i.extend(t||{},{validate:!0}))},_validate:function(t,e){if(!e.validate||!this.validate)return!0;t=i.extend({},this.attributes,t);var n=this.validationError=this.validate(t,e)||null;return n?(this.trigger("invalid",this,n,i.extend(e,{validationError:n})),!1):!0}});var p=["keys","values","pairs","invert","pick","omit"];i.each(p,function(t){h.prototype[t]=function(){var e=o.call(arguments);return e.unshift(this.attributes),i[t].apply(i,e)}});var f=e.Collection=function(t,e){e||(e={}),e.model&&(this.model=e.model),void 0!==e.comparator&&(this.comparator=e.comparator),this._reset(),this.initialize.apply(this,arguments),t&&this.reset(t,i.extend({silent:!0},e))},g={add:!0,remove:!0,merge:!0},v={add:!0,remove:!1};i.extend(f.prototype,a,{model:h,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,i.extend({merge:!1},e,v))},remove:function(t,e){var n=!i.isArray(t);t=n?[t]:i.clone(t),e||(e={});var s,r,o,a;for(s=0,r=t.length;r>s;s++)a=t[s]=this.get(t[s]),a&&(delete this._byId[a.id],delete this._byId[a.cid],o=this.indexOf(a),this.models.splice(o,1),this.length--,e.silent||(e.index=o,a.trigger("remove",a,this,e)),this._removeReference(a,e));return n?t[0]:t},set:function(t,e){e=i.defaults({},e,g),e.parse&&(t=this.parse(t,e));var n=!i.isArray(t);t=n?t?[t]:[]:i.clone(t);var s,r,o,a,l,c,u,d=e.at,p=this.model,f=this.comparator&&null==d&&e.sort!==!1,v=i.isString(this.comparator)?this.comparator:null,m=[],y=[],w={},b=e.add,x=e.merge,T=e.remove,k=!f&&b&&T?[]:!1;for(s=0,r=t.length;r>s;s++){if(l=t[s]||{},o=l instanceof h?a=l:l[p.prototype.idAttribute||"id"],c=this.get(o))T&&(w[c.cid]=!0),x&&(l=l===a?a.attributes:l,e.parse&&(l=c.parse(l,e)),c.set(l,e),f&&!u&&c.hasChanged(v)&&(u=!0)),t[s]=c;else if(b){if(a=t[s]=this._prepareModel(l,e),!a)continue;m.push(a),this._addReference(a,e)}a=c||a,!k||!a.isNew()&&w[a.id]||k.push(a),w[a.id]=!0}if(T){for(s=0,r=this.length;r>s;++s)w[(a=this.models[s]).cid]||y.push(a);y.length&&this.remove(y,e)}if(m.length||k&&k.length)if(f&&(u=!0),this.length+=m.length,null!=d)for(s=0,r=m.length;r>s;s++)this.models.splice(d+s,0,m[s]);else{k&&(this.models.length=0);var _=k||m;for(s=0,r=_.length;r>s;s++)this.models.push(_[s])}if(u&&this.sort({silent:!0}),!e.silent){for(s=0,r=m.length;r>s;s++)(a=m[s]).trigger("add",a,this,e);(u||k&&k.length)&&this.trigger("sort",this,e)}return n?t[0]:t},reset:function(t,e){e||(e={});for(var n=0,s=this.models.length;s>n;n++)this._removeReference(this.models[n],e);return e.previousModels=this.models,this._reset(),t=this.add(t,i.extend({silent:!0},e)),e.silent||this.trigger("reset",this,e),t},push:function(t,e){return this.add(t,i.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);return this.remove(e,t),e},unshift:function(t,e){return this.add(t,i.extend({at:0},e))},shift:function(t){var e=this.at(0);return this.remove(e,t),e},slice:function(){return o.apply(this.models,arguments)},get:function(t){return null==t?void 0:this._byId[t]||this._byId[t.id]||this._byId[t.cid]},at:function(t){return this.models[t]},where:function(t,e){return i.isEmpty(t)?e?void 0:[]:this[e?"find":"filter"](function(e){for(var i in t)if(t[i]!==e.get(i))return!1;return!0})},findWhere:function(t){return this.where(t,!0)},sort:function(t){if(!this.comparator)throw new Error("Cannot sort a set without a comparator");return t||(t={}),i.isString(this.comparator)||1===this.comparator.length?this.models=this.sortBy(this.comparator,this):this.models.sort(i.bind(this.comparator,this)),t.silent||this.trigger("sort",this,t),this},pluck:function(t){return i.invoke(this.models,"get",t)},fetch:function(t){t=t?i.clone(t):{},void 0===t.parse&&(t.parse=!0);var e=t.success,n=this;return t.success=function(i){var s=t.reset?"reset":"set";n[s](i,t),e&&e(n,i,t),n.trigger("sync",n,i,t)},M(this,t),this.sync("read",this,t)},create:function(t,e){if(e=e?i.clone(e):{},!(t=this._prepareModel(t,e)))return!1;e.wait||this.add(t,e);var n=this,s=e.success;return e.success=function(t,i){e.wait&&n.add(t,e),s&&s(t,i,e)},t.save(null,e),t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models)},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(t,e){if(t instanceof h)return t;e=e?i.clone(e):{},e.collection=this;var n=new this.model(t,e);return n.validationError?(this.trigger("invalid",this,n.validationError,e),!1):n},_addReference:function(t,e){this._byId[t.cid]=t,null!=t.id&&(this._byId[t.id]=t),t.collection||(t.collection=this),t.on("all",this._onModelEvent,this)},_removeReference:function(t,e){this===t.collection&&delete t.collection,t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,i,n){("add"!==t&&"remove"!==t||i===this)&&("destroy"===t&&this.remove(e,n),e&&t==="change:"+e.idAttribute&&(delete this._byId[e.previous(e.idAttribute)],null!=e.id&&(this._byId[e.id]=e)),this.trigger.apply(this,arguments))}});var m=["forEach","each","map","collect","reduce","foldl","inject","reduceRight","foldr","find","detect","filter","select","reject","every","all","some","any","include","contains","invoke","max","min","toArray","size","first","head","take","initial","rest","tail","drop","last","without","difference","indexOf","shuffle","lastIndexOf","isEmpty","chain","sample"];i.each(m,function(t){f.prototype[t]=function(){var e=o.call(arguments);return e.unshift(this.models),i[t].apply(i,e)}});var y=["groupBy","countBy","sortBy","indexBy"];i.each(y,function(t){f.prototype[t]=function(e,n){var s=i.isFunction(e)?e:function(t){return t.get(e)};return i[t](this.models,s,n)}});var w=e.View=function(t){this.cid=i.uniqueId("view"),t||(t={}),i.extend(this,i.pick(t,x)),this._ensureElement(),this.initialize.apply(this,arguments),this.delegateEvents()},b=/^(\S+)\s*(.*)$/,x=["model","collection","el","id","attributes","className","tagName","events"];i.extend(w.prototype,a,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){return this.$el.remove(),this.stopListening(),this},setElement:function(t,i){return this.$el&&this.undelegateEvents(),this.$el=t instanceof e.$?t:e.$(t),this.el=this.$el[0],i!==!1&&this.delegateEvents(),this},delegateEvents:function(t){if(!t&&!(t=i.result(this,"events")))return this;this.undelegateEvents();for(var e in t){var n=t[e];if(i.isFunction(n)||(n=this[t[e]]),n){var s=e.match(b),r=s[1],o=s[2];n=i.bind(n,this),r+=".delegateEvents"+this.cid,""===o?this.$el.on(r,n):this.$el.on(r,o,n)}}return this},undelegateEvents:function(){return this.$el.off(".delegateEvents"+this.cid),this},_ensureElement:function(){if(this.el)this.setElement(i.result(this,"el"),!1);else{var t=i.extend({},i.result(this,"attributes"));this.id&&(t.id=i.result(this,"id")),this.className&&(t["class"]=i.result(this,"className"));var n=e.$("<"+i.result(this,"tagName")+">").attr(t);this.setElement(n,!1)}}}),e.sync=function(t,n,s){var r=k[t];i.defaults(s||(s={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var o={type:r,dataType:"json"};if(s.url||(o.url=i.result(n,"url")||L()),null!=s.data||!n||"create"!==t&&"update"!==t&&"patch"!==t||(o.contentType="application/json",o.data=JSON.stringify(s.attrs||n.toJSON(s))),s.emulateJSON&&(o.contentType="application/x-www-form-urlencoded",o.data=o.data?{model:o.data}:{}),s.emulateHTTP&&("PUT"===r||"DELETE"===r||"PATCH"===r)){o.type="POST",s.emulateJSON&&(o.data._method=r);var a=s.beforeSend;s.beforeSend=function(t){return t.setRequestHeader("X-HTTP-Method-Override",r),a?a.apply(this,arguments):void 0}}"GET"===o.type||s.emulateJSON||(o.processData=!1),"PATCH"===o.type&&T&&(o.xhr=function(){return new ActiveXObject("Microsoft.XMLHTTP")});var l=s.xhr=e.ajax(i.extend(o,s));return n.trigger("request",n,l,s),l};var T=!("undefined"==typeof window||!window.ActiveXObject||window.XMLHttpRequest&&(new XMLHttpRequest).dispatchEvent),k={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var _=e.Router=function(t){t||(t={}),t.routes&&(this.routes=t.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},C=/\((.*?)\)/g,S=/(\(\?)?:\w+/g,$=/\*\w+/g,E=/[\-{}\[\]+?.,\\\^$|#\s]/g;i.extend(_.prototype,a,{initialize:function(){},route:function(t,n,s){i.isRegExp(t)||(t=this._routeToRegExp(t)),i.isFunction(n)&&(s=n,n=""),s||(s=this[n]);var r=this;return e.history.route(t,function(i){var o=r._extractParameters(t,i);r.execute(s,o),r.trigger.apply(r,["route:"+n].concat(o)),r.trigger("route",n,o),e.history.trigger("route",r,n,o)}),this},execute:function(t,e){t&&t.apply(this,e)},navigate:function(t,i){return e.history.navigate(t,i),this},_bindRoutes:function(){if(this.routes){this.routes=i.result(this,"routes");for(var t,e=i.keys(this.routes);null!=(t=e.pop());)this.route(t,this.routes[t])}},_routeToRegExp:function(t){return t=t.replace(E,"\\$&").replace(C,"(?:$1)?").replace(S,function(t,e){return e?t:"([^/?]+)"}).replace($,"([^?]*?)"),new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(t,e){var n=t.exec(e).slice(1);return i.map(n,function(t,e){return e===n.length-1?t||null:t?decodeURIComponent(t):null})}});var N=e.History=function(){this.handlers=[],i.bindAll(this,"checkUrl"),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},A=/^[#\/]|\s+$/g,j=/^\/+|\/+$/g,D=/msie [\w.]+/,H=/\/$/,O=/#.*$/;N.started=!1,i.extend(N.prototype,a,{interval:50,atRoot:function(){return this.location.pathname.replace(/[^\/]$/,"$&/")===this.root},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getFragment:function(t,e){if(null==t)if(this._hasPushState||!this._wantsHashChange||e){t=decodeURI(this.location.pathname+this.location.search);var i=this.root.replace(H,"");t.indexOf(i)||(t=t.slice(i.length))}else t=this.getHash();return t.replace(A,"")},start:function(t){if(N.started)throw new Error("Backbone.history has already been started");
N.started=!0,this.options=i.extend({root:"/"},this.options,t),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._wantsPushState=!!this.options.pushState,this._hasPushState=!!(this.options.pushState&&this.history&&this.history.pushState);var n=this.getFragment(),s=document.documentMode,r=D.exec(navigator.userAgent.toLowerCase())&&(!s||7>=s);if(this.root=("/"+this.root+"/").replace(j,"/"),r&&this._wantsHashChange){var o=e.$('<iframe src="javascript:0" tabindex="-1">');this.iframe=o.hide().appendTo("body")[0].contentWindow,this.navigate(n)}this._hasPushState?e.$(window).on("popstate",this.checkUrl):this._wantsHashChange&&"onhashchange"in window&&!r?e.$(window).on("hashchange",this.checkUrl):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),this.fragment=n;var a=this.location;if(this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot())return this.fragment=this.getFragment(null,!0),this.location.replace(this.root+"#"+this.fragment),!0;this._hasPushState&&this.atRoot()&&a.hash&&(this.fragment=this.getHash().replace(A,""),this.history.replaceState({},document.title,this.root+this.fragment))}return this.options.silent?void 0:this.loadUrl()},stop:function(){e.$(window).off("popstate",this.checkUrl).off("hashchange",this.checkUrl),this._checkUrlInterval&&clearInterval(this._checkUrlInterval),N.started=!1},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();return e===this.fragment&&this.iframe&&(e=this.getFragment(this.getHash(this.iframe))),e===this.fragment?!1:(this.iframe&&this.navigate(e),void this.loadUrl())},loadUrl:function(t){return t=this.fragment=this.getFragment(t),i.any(this.handlers,function(e){return e.route.test(t)?(e.callback(t),!0):void 0})},navigate:function(t,e){if(!N.started)return!1;e&&e!==!0||(e={trigger:!!e});var i=this.root+(t=this.getFragment(t||""));if(t=t.replace(O,""),this.fragment!==t){if(this.fragment=t,""===t&&"/"!==i&&(i=i.slice(0,-1)),this._hasPushState)this.history[e.replace?"replaceState":"pushState"]({},document.title,i);else{if(!this._wantsHashChange)return this.location.assign(i);this._updateHash(this.location,t,e.replace),this.iframe&&t!==this.getFragment(this.getHash(this.iframe))&&(e.replace||this.iframe.document.open().close(),this._updateHash(this.iframe.location,t,e.replace))}return e.trigger?this.loadUrl(t):void 0}},_updateHash:function(t,e,i){if(i){var n=t.href.replace(/(javascript:|#).*$/,"");t.replace(n+"#"+e)}else t.hash="#"+e}}),e.history=new N;var P=function(t,e){var n,s=this;n=t&&i.has(t,"constructor")?t.constructor:function(){return s.apply(this,arguments)},i.extend(n,s,e);var r=function(){this.constructor=n};return r.prototype=s.prototype,n.prototype=new r,t&&i.extend(n.prototype,t),n.__super__=s.prototype,n};h.extend=f.extend=_.extend=w.extend=N.extend=P;var L=function(){throw new Error('A "url" property or function must be specified')},M=function(t,e){var i=e.error;e.error=function(n){i&&i(t,n,e),t.trigger("error",t,n,e)}};return e}),!function(t,e,i,n){function s(e,i){this.settings=null,this.options=t.extend({},s.Defaults,i),this.$element=t(e),this.drag=t.extend({},h),this.state=t.extend({},p),this.e=t.extend({},f),this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._invalidated={},this._pipe=[],t.each(s.Plugins,t.proxy(function(t,e){this._plugins[t[0].toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(s.Pipe,t.proxy(function(e,i){this._pipe.push({filter:i.filter,run:t.proxy(i.run,this)})},this)),this.setup(),this.initialize()}function r(t){if(t.touches!==n)return{x:t.touches[0].pageX,y:t.touches[0].pageY};if(t.touches===n){if(t.pageX!==n)return{x:t.pageX,y:t.pageY};if(t.pageX===n)return{x:t.clientX,y:t.clientY}}}function o(t){var e,n,s=i.createElement("div"),r=t;for(e in r)if(n=r[e],"undefined"!=typeof s.style[n])return s=null,[n,e];return[!1]}function a(){return o(["transition","WebkitTransition","MozTransition","OTransition"])[1]}function l(){return o(["transform","WebkitTransform","MozTransform","OTransform","msTransform"])[0]}function c(){return o(["perspective","webkitPerspective","MozPerspective","OPerspective","MsPerspective"])[0]}function u(){return"ontouchstart"in e||!!navigator.msMaxTouchPoints}function d(){return e.navigator.msPointerEnabled}var h,p,f;h={start:0,startX:0,startY:0,current:0,currentX:0,currentY:0,offsetX:0,offsetY:0,distance:null,startTime:0,endTime:0,updatedX:0,targetEl:null},p={isTouch:!1,isScrolling:!1,isSwiping:!1,direction:!1,inMotion:!1},f={_onDragStart:null,_onDragMove:null,_onDragEnd:null,_transitionEnd:null,_resizer:null,_responsiveCall:null,_goToLoop:null,_checkVisibile:null},s.Defaults={items:3,loop:!1,center:!1,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,responsiveClass:!1,fallbackEasing:"swing",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",themeClass:"owl-theme",baseClass:"owl-carousel",itemClass:"owl-item",centerClass:"center",activeClass:"active"},s.Width={Default:"default",Inner:"inner",Outer:"outer"},s.Plugins={},s.Pipe=[{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){var t=this._clones,e=this.$stage.children(".cloned");(e.length!==t.length||!this.settings.loop&&t.length>0)&&(this.$stage.children(".cloned").remove(),this._clones=[])}},{filter:["items","settings"],run:function(){var t,e,i=this._clones,n=this._items,s=this.settings.loop?i.length-Math.max(2*this.settings.items,4):0;for(t=0,e=Math.abs(s/2);e>t;t++)s>0?(this.$stage.children().eq(n.length+i.length-1).remove(),i.pop(),this.$stage.children().eq(0).remove(),i.pop()):(i.push(i.length/2),this.$stage.append(n[i[i.length-1]].clone().addClass("cloned")),i.push(n.length-1-(i.length-1)/2),this.$stage.prepend(n[i[i.length-1]].clone().addClass("cloned")))}},{filter:["width","items","settings"],run:function(){var t,e,i,n=this.settings.rtl?1:-1,s=(this.width()/this.settings.items).toFixed(3),r=0;for(this._coordinates=[],e=0,i=this._clones.length+this._items.length;i>e;e++)t=this._mergers[this.relative(e)],t=this.settings.mergeFit&&Math.min(t,this.settings.items)||t,r+=(this.settings.autoWidth?this._items[this.relative(e)].width()+this.settings.margin:s*t)*n,this._coordinates.push(r)}},{filter:["width","items","settings"],run:function(){var e,i,n=(this.width()/this.settings.items).toFixed(3),s={width:Math.abs(this._coordinates[this._coordinates.length-1])+2*this.settings.stagePadding,"padding-left":this.settings.stagePadding||"","padding-right":this.settings.stagePadding||""};if(this.$stage.css(s),s={width:this.settings.autoWidth?"auto":n-this.settings.margin},s[this.settings.rtl?"margin-left":"margin-right"]=this.settings.margin,!this.settings.autoWidth&&t.grep(this._mergers,function(t){return t>1}).length>0)for(e=0,i=this._coordinates.length;i>e;e++)s.width=Math.abs(this._coordinates[e])-Math.abs(this._coordinates[e-1]||0)-this.settings.margin,this.$stage.children().eq(e).css(s);else this.$stage.children().css(s)}},{filter:["width","items","settings"],run:function(t){t.current&&this.reset(this.$stage.children().index(t.current))}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,i,n,s=this.settings.rtl?1:-1,r=2*this.settings.stagePadding,o=this.coordinates(this.current())+r,a=o+this.width()*s,l=[];for(i=0,n=this._coordinates.length;n>i;i++)t=this._coordinates[i-1]||0,e=Math.abs(this._coordinates[i])+r*s,(this.op(t,"<=",o)&&this.op(t,">",a)||this.op(e,"<",o)&&this.op(e,">",a))&&l.push(i);this.$stage.children("."+this.settings.activeClass).removeClass(this.settings.activeClass),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass(this.settings.activeClass),this.settings.center&&(this.$stage.children("."+this.settings.centerClass).removeClass(this.settings.centerClass),this.$stage.children().eq(this.current()).addClass(this.settings.centerClass))}}],s.prototype.initialize=function(){if(this.trigger("initialize"),this.$element.addClass(this.settings.baseClass).addClass(this.settings.themeClass).toggleClass("owl-rtl",this.settings.rtl),this.browserSupport(),this.settings.autoWidth&&this.state.imagesLoaded!==!0){var e,i,s;if(e=this.$element.find("img"),i=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:n,s=this.$element.children(i).width(),e.length&&0>=s)return this.preloadAutoWidthImages(e),!1}this.$element.addClass("owl-loading"),this.$stage=t("<"+this.settings.stageElement+' class="owl-stage"/>').wrap('<div class="owl-stage-outer">'),this.$element.append(this.$stage.parent()),this.replace(this.$element.children().not(this.$stage.parent())),this._width=this.$element.width(),this.refresh(),this.$element.removeClass("owl-loading").addClass("owl-loaded"),this.eventsCall(),this.internalEvents(),this.addTriggerableEvents(),this.trigger("initialized")},s.prototype.setup=function(){var e=this.viewport(),i=this.options.responsive,n=-1,s=null;i?(t.each(i,function(t){e>=t&&t>n&&(n=Number(t))}),s=t.extend({},this.options,i[n]),delete s.responsive,s.responsiveClass&&this.$element.attr("class",function(t,e){return e.replace(/\b owl-responsive-\S+/g,"")}).addClass("owl-responsive-"+n)):s=t.extend({},this.options),(null===this.settings||this._breakpoint!==n)&&(this.trigger("change",{property:{name:"settings",value:s}}),this._breakpoint=n,this.settings=s,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}}))},s.prototype.optionsLogic=function(){this.$element.toggleClass("owl-center",this.settings.center),this.settings.loop&&this._items.length<this.settings.items&&(this.settings.loop=!1),this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},s.prototype.prepare=function(e){var i=this.trigger("prepare",{content:e});return i.data||(i.data=t("<"+this.settings.itemElement+"/>").addClass(this.settings.itemClass).append(e)),this.trigger("prepared",{content:i.data}),i.data},s.prototype.update=function(){for(var e=0,i=this._pipe.length,n=t.proxy(function(t){return this[t]},this._invalidated),s={};i>e;)(this._invalidated.all||t.grep(this._pipe[e].filter,n).length>0)&&this._pipe[e].run(s),e++;this._invalidated={}},s.prototype.width=function(t){switch(t=t||s.Width.Default){case s.Width.Inner:case s.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},s.prototype.refresh=function(){return 0===this._items.length?!1:((new Date).getTime(),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$stage.addClass("owl-refresh"),this.update(),this.$stage.removeClass("owl-refresh"),this.state.orientation=e.orientation,this.watchVisibility(),this.trigger("refreshed"),void 0)},s.prototype.eventsCall=function(){this.e._onDragStart=t.proxy(function(t){this.onDragStart(t)},this),this.e._onDragMove=t.proxy(function(t){this.onDragMove(t)},this),this.e._onDragEnd=t.proxy(function(t){this.onDragEnd(t)},this),this.e._onResize=t.proxy(function(t){this.onResize(t)},this),this.e._transitionEnd=t.proxy(function(t){this.transitionEnd(t)},this),this.e._preventClick=t.proxy(function(t){this.preventClick(t)},this)},s.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this.e._onResize,this.settings.responsiveRefreshRate)},s.prototype.onResize=function(){return this._items.length?this._width===this.$element.width()?!1:this.trigger("resize").isDefaultPrevented()?!1:(this._width=this.$element.width(),this.invalidate("width"),this.refresh(),void this.trigger("resized")):!1},s.prototype.eventsRouter=function(t){var e=t.type;"mousedown"===e||"touchstart"===e?this.onDragStart(t):"mousemove"===e||"touchmove"===e?this.onDragMove(t):"mouseup"===e||"touchend"===e?this.onDragEnd(t):"touchcancel"===e&&this.onDragEnd(t)},s.prototype.internalEvents=function(){var i=(u(),d());this.settings.mouseDrag?(this.$stage.on("mousedown",t.proxy(function(t){this.eventsRouter(t)},this)),this.$stage.on("dragstart",function(){return!1}),this.$stage.get(0).onselectstart=function(){return!1}):this.$element.addClass("owl-text-select-on"),this.settings.touchDrag&&!i&&this.$stage.on("touchstart touchcancel",t.proxy(function(t){this.eventsRouter(t)},this)),this.transitionEndVendor&&this.on(this.$stage.get(0),this.transitionEndVendor,this.e._transitionEnd,!1),this.settings.responsive!==!1&&this.on(e,"resize",t.proxy(this.onThrottledResize,this))},s.prototype.onDragStart=function(n){var s,o,a,l;if(s=n.originalEvent||n||e.event,3===s.which||this.state.isTouch)return!1;if("mousedown"===s.type&&this.$stage.addClass("owl-grab"),this.trigger("drag"),this.drag.startTime=(new Date).getTime(),this.speed(0),this.state.isTouch=!0,this.state.isScrolling=!1,this.state.isSwiping=!1,this.drag.distance=0,o=r(s).x,a=r(s).y,this.drag.offsetX=this.$stage.position().left,this.drag.offsetY=this.$stage.position().top,this.settings.rtl&&(this.drag.offsetX=this.$stage.position().left+this.$stage.width()-this.width()+this.settings.margin),this.state.inMotion&&this.support3d)l=this.getTransformProperty(),this.drag.offsetX=l,this.animate(l),this.state.inMotion=!0;else if(this.state.inMotion&&!this.support3d)return this.state.inMotion=!1,!1;this.drag.startX=o-this.drag.offsetX,this.drag.startY=a-this.drag.offsetY,this.drag.start=o-this.drag.startX,this.drag.targetEl=s.target||s.srcElement,this.drag.updatedX=this.drag.start,("IMG"===this.drag.targetEl.tagName||"A"===this.drag.targetEl.tagName)&&(this.drag.targetEl.draggable=!1),t(i).on("mousemove.owl.dragEvents mouseup.owl.dragEvents touchmove.owl.dragEvents touchend.owl.dragEvents",t.proxy(function(t){this.eventsRouter(t)},this))},s.prototype.onDragMove=function(t){var i,s,o,a,l,c;this.state.isTouch&&(this.state.isScrolling||(i=t.originalEvent||t||e.event,s=r(i).x,o=r(i).y,this.drag.currentX=s-this.drag.startX,this.drag.currentY=o-this.drag.startY,this.drag.distance=this.drag.currentX-this.drag.offsetX,this.drag.distance<0?this.state.direction=this.settings.rtl?"right":"left":this.drag.distance>0&&(this.state.direction=this.settings.rtl?"left":"right"),this.settings.loop?this.op(this.drag.currentX,">",this.coordinates(this.minimum()))&&"right"===this.state.direction?this.drag.currentX-=(this.settings.center&&this.coordinates(0))-this.coordinates(this._items.length):this.op(this.drag.currentX,"<",this.coordinates(this.maximum()))&&"left"===this.state.direction&&(this.drag.currentX+=(this.settings.center&&this.coordinates(0))-this.coordinates(this._items.length)):(a=this.coordinates(this.settings.rtl?this.maximum():this.minimum()),l=this.coordinates(this.settings.rtl?this.minimum():this.maximum()),c=this.settings.pullDrag?this.drag.distance/5:0,this.drag.currentX=Math.max(Math.min(this.drag.currentX,a+c),l+c)),(this.drag.distance>8||this.drag.distance<-8)&&(i.preventDefault!==n?i.preventDefault():i.returnValue=!1,this.state.isSwiping=!0),this.drag.updatedX=this.drag.currentX,(this.drag.currentY>16||this.drag.currentY<-16)&&this.state.isSwiping===!1&&(this.state.isScrolling=!0,this.drag.updatedX=this.drag.start),this.animate(this.drag.updatedX)))},s.prototype.onDragEnd=function(e){var n,s,r;if(this.state.isTouch){if("mouseup"===e.type&&this.$stage.removeClass("owl-grab"),this.trigger("dragged"),this.drag.targetEl.removeAttribute("draggable"),this.state.isTouch=!1,this.state.isScrolling=!1,this.state.isSwiping=!1,0===this.drag.distance&&this.state.inMotion!==!0)return this.state.inMotion=!1,!1;this.drag.endTime=(new Date).getTime(),n=this.drag.endTime-this.drag.startTime,s=Math.abs(this.drag.distance),(s>3||n>300)&&this.removeClick(this.drag.targetEl),r=this.closest(this.drag.updatedX),this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(r),this.invalidate("position"),this.update(),this.settings.pullDrag||this.drag.updatedX!==this.coordinates(r)||this.transitionEnd(),this.drag.distance=0,t(i).off(".owl.dragEvents")}},s.prototype.removeClick=function(i){this.drag.targetEl=i,t(i).on("click.preventClick",this.e._preventClick),e.setTimeout(function(){t(i).off("click.preventClick")},300)},s.prototype.preventClick=function(e){e.preventDefault?e.preventDefault():e.returnValue=!1,e.stopPropagation&&e.stopPropagation(),t(e.target).off("click.preventClick")},s.prototype.getTransformProperty=function(){var t,i;return t=e.getComputedStyle(this.$stage.get(0),null).getPropertyValue(this.vendorName+"transform"),t=t.replace(/matrix(3d)?\(|\)/g,"").split(","),i=16===t.length,i!==!0?t[4]:t[12]},s.prototype.closest=function(e){var i=-1,n=30,s=this.width(),r=this.coordinates();return this.settings.freeDrag||t.each(r,t.proxy(function(t,o){return e>o-n&&o+n>e?i=t:this.op(e,"<",o)&&this.op(e,">",r[t+1]||o-s)&&(i="left"===this.state.direction?t+1:t),-1===i},this)),this.settings.loop||(this.op(e,">",r[this.minimum()])?i=e=this.minimum():this.op(e,"<",r[this.maximum()])&&(i=e=this.maximum())),i},s.prototype.animate=function(e){this.trigger("translate"),this.state.inMotion=this.speed()>0,this.support3d?this.$stage.css({transform:"translate3d("+e+"px,0px, 0px)",transition:this.speed()/1e3+"s"}):this.state.isTouch?this.$stage.css({left:e+"px"}):this.$stage.animate({left:e},this.speed()/1e3,this.settings.fallbackEasing,t.proxy(function(){this.state.inMotion&&this.transitionEnd()},this))},s.prototype.current=function(t){if(t===n)return this._current;if(0===this._items.length)return n;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==n&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},s.prototype.invalidate=function(t){this._invalidated[t]=!0},s.prototype.reset=function(t){t=this.normalize(t),t!==n&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},s.prototype.normalize=function(e,i){var s=i?this._items.length:this._items.length+this._clones.length;return!t.isNumeric(e)||1>s?n:e=this._clones.length?(e%s+s)%s:Math.max(this.minimum(i),Math.min(this.maximum(i),e))},s.prototype.relative=function(t){return t=this.normalize(t),t-=this._clones.length/2,this.normalize(t,!0)},s.prototype.maximum=function(t){var e,i,n,s=0,r=this.settings;if(t)return this._items.length-1;if(!r.loop&&r.center)e=this._items.length-1;else if(r.loop||r.center)if(r.loop||r.center)e=this._items.length+r.items;else{if(!r.autoWidth&&!r.merge)throw"Can not detect maximum absolute position.";for(revert=r.rtl?1:-1,i=this.$stage.width()-this.$element.width();(n=this.coordinates(s))&&!(n*revert>=i);)e=++s}else e=this._items.length-r.items;return e},s.prototype.minimum=function(t){return t?0:this._clones.length/2},s.prototype.items=function(t){return t===n?this._items.slice():(t=this.normalize(t,!0),this._items[t])},s.prototype.mergers=function(t){return t===n?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},s.prototype.clones=function(e){var i=this._clones.length/2,s=i+this._items.length,r=function(t){return t%2===0?s+t/2:i-(t+1)/2};return e===n?t.map(this._clones,function(t,e){return r(e)}):t.map(this._clones,function(t,i){return t===e?r(i):null})},s.prototype.speed=function(t){return t!==n&&(this._speed=t),this._speed},s.prototype.coordinates=function(e){var i=null;return e===n?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(i=this._coordinates[e],i+=(this.width()-i+(this._coordinates[e-1]||0))/2*(this.settings.rtl?-1:1)):i=this._coordinates[e-1]||0,i)},s.prototype.duration=function(t,e,i){return Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(i||this.settings.smartSpeed)},s.prototype.to=function(i,n){if(this.settings.loop){var s=i-this.relative(this.current()),r=this.current(),o=this.current(),a=this.current()+s,l=0>o-a?!0:!1,c=this._clones.length+this._items.length;a<this.settings.items&&l===!1?(r=o+this._items.length,this.reset(r)):a>=c-this.settings.items&&l===!0&&(r=o-this._items.length,this.reset(r)),e.clearTimeout(this.e._goToLoop),this.e._goToLoop=e.setTimeout(t.proxy(function(){this.speed(this.duration(this.current(),r+s,n)),this.current(r+s),this.update()},this),30)}else this.speed(this.duration(this.current(),i,n)),this.current(i),this.update()},s.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},s.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},s.prototype.transitionEnd=function(t){return t!==n&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0))?!1:(this.state.inMotion=!1,void this.trigger("translated"))},s.prototype.viewport=function(){var n;if(this.options.responsiveBaseElement!==e)n=t(this.options.responsiveBaseElement).width();else if(e.innerWidth)n=e.innerWidth;else{if(!i.documentElement||!i.documentElement.clientWidth)throw"Can not detect viewport width.";n=i.documentElement.clientWidth}return n},s.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").andSelf("[data-merge]").attr("data-merge")||1)},this)),this.reset(t.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},s.prototype.add=function(t,e){e=e===n?this._items.length:this.normalize(e,!0),this.trigger("add",{content:t,position:e}),0===this._items.length||e===this._items.length?(this.$stage.append(t),this._items.push(t),this._mergers.push(1*t.find("[data-merge]").andSelf("[data-merge]").attr("data-merge")||1)):(this._items[e].before(t),this._items.splice(e,0,t),this._mergers.splice(e,0,1*t.find("[data-merge]").andSelf("[data-merge]").attr("data-merge")||1)),this.invalidate("items"),this.trigger("added",{content:t,position:e})},s.prototype.remove=function(t){t=this.normalize(t,!0),t!==n&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},s.prototype.addTriggerableEvents=function(){var e=t.proxy(function(e,i){return t.proxy(function(t){t.relatedTarget!==this&&(this.suppress([i]),e.apply(this,[].slice.call(arguments,1)),this.release([i]))},this)},this);t.each({next:this.next,prev:this.prev,to:this.to,destroy:this.destroy,refresh:this.refresh,replace:this.replace,add:this.add,remove:this.remove},t.proxy(function(t,i){this.$element.on(t+".owl.carousel",e(i,t+".owl.carousel"))},this))},s.prototype.watchVisibility=function(){function i(t){return t.offsetWidth>0&&t.offsetHeight>0}function n(){i(this.$element.get(0))&&(this.$element.removeClass("owl-hidden"),this.refresh(),e.clearInterval(this.e._checkVisibile))}i(this.$element.get(0))||(this.$element.addClass("owl-hidden"),e.clearInterval(this.e._checkVisibile),this.e._checkVisibile=e.setInterval(t.proxy(n,this),500))},s.prototype.preloadAutoWidthImages=function(e){var i,n,s,r;i=0,n=this,e.each(function(o,a){s=t(a),r=new Image,r.onload=function(){i++,s.attr("src",r.src),s.css("opacity",1),i>=e.length&&(n.state.imagesLoaded=!0,n.initialize())},r.src=s.attr("src")||s.attr("data-src")||s.attr("data-src-retina")})},s.prototype.destroy=function(){this.$element.hasClass(this.settings.themeClass)&&this.$element.removeClass(this.settings.themeClass),this.settings.responsive!==!1&&t(e).off("resize.owl.carousel"),this.transitionEndVendor&&this.off(this.$stage.get(0),this.transitionEndVendor,this.e._transitionEnd);for(var n in this._plugins)this._plugins[n].destroy();(this.settings.mouseDrag||this.settings.touchDrag)&&(this.$stage.off("mousedown touchstart touchcancel"),t(i).off(".owl.dragEvents"),this.$stage.get(0).onselectstart=function(){},this.$stage.off("dragstart",function(){return!1})),this.$element.off(".owl"),this.$stage.children(".cloned").remove(),this.e=null,this.$element.removeData("owlCarousel"),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$stage.unwrap()},s.prototype.op=function(t,e,i){var n=this.settings.rtl;switch(e){case"<":return n?t>i:i>t;case">":return n?i>t:t>i;case">=":return n?i>=t:t>=i;case"<=":return n?t>=i:i>=t}},s.prototype.on=function(t,e,i,n){t.addEventListener?t.addEventListener(e,i,n):t.attachEvent&&t.attachEvent("on"+e,i)},s.prototype.off=function(t,e,i,n){t.removeEventListener?t.removeEventListener(e,i,n):t.detachEvent&&t.detachEvent("on"+e,i)},s.prototype.trigger=function(e,i,n){var s={item:{count:this._items.length,index:this.current()}},r=t.camelCase(t.grep(["on",e,n],function(t){return t}).join("-").toLowerCase()),o=t.Event([e,"owl",n||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},s,i));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(o)}),this.$element.trigger(o),this.settings&&"function"==typeof this.settings[r]&&this.settings[r].apply(this,o)),o},s.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},s.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},s.prototype.browserSupport=function(){if(this.support3d=c(),this.support3d){this.transformVendor=l();var t=["transitionend","webkitTransitionEnd","transitionend","oTransitionEnd"];this.transitionEndVendor=t[a()],this.vendorName=this.transformVendor.replace(/Transform/i,""),this.vendorName=""!==this.vendorName?"-"+this.vendorName.toLowerCase()+"-":""}this.state.orientation=e.orientation},t.fn.owlCarousel=function(e){return this.each(function(){t(this).data("owlCarousel")||t(this).data("owlCarousel",new s(this,e))})},t.fn.owlCarousel.Constructor=s}(window.Zepto||window.jQuery,window,document),function(t,e){var i=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type))for(var i=this._core.settings,n=i.center&&Math.ceil(i.items/2)||i.items,s=i.center&&-1*n||0,r=(e.property&&e.property.value||this._core.current())+s,o=this._core.clones().length,a=t.proxy(function(t,e){this.load(e)},this);s++<n;)this.load(o/2+this._core.relative(r)),o&&t.each(this._core.clones(this._core.relative(r++)),a)},this)},this._core.options=t.extend({},i.Defaults,this._core.options),this._core.$element.on(this._handlers)};i.Defaults={lazyLoad:!1},i.prototype.load=function(i){var n=this._core.$stage.children().eq(i),s=n&&n.find(".owl-lazy");!s||t.inArray(n.get(0),this._loaded)>-1||(s.each(t.proxy(function(i,n){var s,r=t(n),o=e.devicePixelRatio>1&&r.attr("data-src-retina")||r.attr("data-src");this._core.trigger("load",{element:r,url:o},"lazy"),r.is("img")?r.one("load.owl.lazy",t.proxy(function(){r.css("opacity",1),this._core.trigger("loaded",{element:r,url:o},"lazy")},this)).attr("src",o):(s=new Image,s.onload=t.proxy(function(){r.css({"background-image":"url("+o+")",opacity:"1"}),this._core.trigger("loaded",{element:r,url:o},"lazy")},this),s.src=o)},this)),this._loaded.push(n.get(0)))},i.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=i}(window.Zepto||window.jQuery,window,document),function(t){var e=function(i){this._core=i,this._handlers={"initialized.owl.carousel":t.proxy(function(){this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){this._core.settings.autoHeight&&"position"==t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass)===this._core.$stage.children().eq(this._core.current())&&this.update()},this)},this._core.options=t.extend({},e.Defaults,this._core.options),this._core.$element.on(this._handlers)};e.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},e.prototype.update=function(){this._core.$stage.parent().height(this._core.$stage.children().eq(this._core.current()).height()).addClass(this._core.settings.autoHeightClass)},e.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=e}(window.Zepto||window.jQuery,window,document),function(t,e,i){var n=function(e){this._core=e,this._videos={},this._playing=null,this._fullscreen=!1,this._handlers={"resize.owl.carousel":t.proxy(function(t){this._core.settings.video&&!this.isInFullScreen()&&t.preventDefault()},this),"refresh.owl.carousel changed.owl.carousel":t.proxy(function(){this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){var i=t(e.content).find(".owl-video");i.length&&(i.css("display","none"),this.fetch(i,t(e.content)))},this)},this._core.options=t.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};n.Defaults={video:!1,videoHeight:!1,videoWidth:!1},n.prototype.fetch=function(t,e){var i=t.attr("data-vimeo-id")?"vimeo":"youtube",n=t.attr("data-vimeo-id")||t.attr("data-youtube-id"),s=t.attr("data-width")||this._core.settings.videoWidth,r=t.attr("data-height")||this._core.settings.videoHeight,o=t.attr("href");if(!o)throw new Error("Missing video URL.");if(n=o.match(/(http:|https:|)\/\/(player.|www.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com))\/(video\/|embed\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/),n[3].indexOf("youtu")>-1)i="youtube";else{if(!(n[3].indexOf("vimeo")>-1))throw new Error("Video URL not supported.");i="vimeo"}n=n[6],this._videos[o]={type:i,id:n,width:s,height:r},e.attr("data-video",o),this.thumbnail(t,this._videos[o])},n.prototype.thumbnail=function(e,i){var n,s,r,o=i.width&&i.height?'style="width:'+i.width+"px;height:"+i.height+'px;"':"",a=e.find("img"),l="src",c="",u=this._core.settings,d=function(t){s='<div class="owl-video-play-icon"></div>',n=u.lazyLoad?'<div class="owl-video-tn '+c+'" '+l+'="'+t+'"></div>':'<div class="owl-video-tn" style="opacity:1;background-image:url('+t+')"></div>',e.after(n),e.after(s)};return e.wrap('<div class="owl-video-wrapper"'+o+"></div>"),this._core.settings.lazyLoad&&(l="data-src",c="owl-lazy"),a.length?(d(a.attr(l)),a.remove(),!1):void("youtube"===i.type?(r="http://img.youtube.com/vi/"+i.id+"/hqdefault.jpg",d(r)):"vimeo"===i.type&&t.ajax({type:"GET",url:"http://vimeo.com/api/v2/video/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){r=t[0].thumbnail_large,d(r)}}))},n.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null},n.prototype.play=function(e){this._core.trigger("play",null,"video"),this._playing&&this.stop();var i,n,s=t(e.target||e.srcElement),r=s.closest("."+this._core.settings.itemClass),o=this._videos[r.attr("data-video")],a=o.width||"100%",l=o.height||this._core.$stage.height();"youtube"===o.type?i='<iframe width="'+a+'" height="'+l+'" src="http://www.youtube.com/embed/'+o.id+"?autoplay=1&v="+o.id+'" frameborder="0" allowfullscreen></iframe>':"vimeo"===o.type&&(i='<iframe src="http://player.vimeo.com/video/'+o.id+'?autoplay=1" width="'+a+'" height="'+l+'" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>'),
r.addClass("owl-video-playing"),this._playing=r,n=t('<div style="height:'+l+"px; width:"+a+'px" class="owl-video-frame">'+i+"</div>"),s.after(n)},n.prototype.isInFullScreen=function(){var n=i.fullscreenElement||i.mozFullScreenElement||i.webkitFullscreenElement;return n&&t(n).parent().hasClass("owl-video-frame")&&(this._core.speed(0),this._fullscreen=!0),n&&this._fullscreen&&this._playing?!1:this._fullscreen?(this._fullscreen=!1,!1):this._playing&&this._core.state.orientation!==e.orientation?(this._core.state.orientation=e.orientation,!1):!0},n.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=n}(window.Zepto||window.jQuery,window,document),function(t,e,i,n){var s=function(e){this.core=e,this.core.options=t.extend({},s.Defaults,this.core.options),this.swapping=!0,this.previous=n,this.next=n,this.handlers={"change.owl.carousel":t.proxy(function(t){"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){this.swapping="translated"==t.type},this),"translate.owl.carousel":t.proxy(function(){this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};s.Defaults={animateOut:!1,animateIn:!1},s.prototype.swap=function(){if(1===this.core.settings.items&&this.core.support3d){this.core.speed(0);var e,i=t.proxy(this.clear,this),n=this.core.$stage.children().eq(this.previous),s=this.core.$stage.children().eq(this.next),r=this.core.settings.animateIn,o=this.core.settings.animateOut;this.core.current()!==this.previous&&(o&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),n.css({left:e+"px"}).addClass("animated owl-animated-out").addClass(o).one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",i)),r&&s.addClass("animated owl-animated-in").addClass(r).one("webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend",i))}},s.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.transitionEnd()},s.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=s}(window.Zepto||window.jQuery,window,document),function(t,e,i){var n=function(e){this.core=e,this.core.options=t.extend({},n.Defaults,this.core.options),this.handlers={"translated.owl.carousel refreshed.owl.carousel":t.proxy(function(){this.autoplay()},this),"play.owl.autoplay":t.proxy(function(t,e,i){this.play(e,i)},this),"stop.owl.autoplay":t.proxy(function(){this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this.core.settings.autoplayHoverPause&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this.core.settings.autoplayHoverPause&&this.autoplay()},this)},this.core.$element.on(this.handlers)};n.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},n.prototype.autoplay=function(){this.core.settings.autoplay&&!this.core.state.videoPlay?(e.clearInterval(this.interval),this.interval=e.setInterval(t.proxy(function(){this.play()},this),this.core.settings.autoplayTimeout)):e.clearInterval(this.interval)},n.prototype.play=function(){return i.hidden===!0||this.core.state.isTouch||this.core.state.isScrolling||this.core.state.isSwiping||this.core.state.inMotion?void 0:this.core.settings.autoplay===!1?void e.clearInterval(this.interval):void this.core.next(this.core.settings.autoplaySpeed)},n.prototype.stop=function(){e.clearInterval(this.interval)},n.prototype.pause=function(){e.clearInterval(this.interval)},n.prototype.destroy=function(){var t,i;e.clearInterval(this.interval);for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=n}(window.Zepto||window.jQuery,window,document),function(t){"use strict";var e=function(i){this._core=i,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){this._core.settings.dotsData&&this._templates.push(t(e.content).find("[data-dot]").andSelf("[data-dot]").attr("data-dot"))},this),"add.owl.carousel":t.proxy(function(e){this._core.settings.dotsData&&this._templates.splice(e.position,0,t(e.content).find("[data-dot]").andSelf("[data-dot]").attr("data-dot"))},this),"remove.owl.carousel prepared.owl.carousel":t.proxy(function(t){this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"change.owl.carousel":t.proxy(function(t){if("position"==t.property.name&&!this._core.state.revert&&!this._core.settings.loop&&this._core.settings.navRewind){var e=this._core.current(),i=this._core.maximum(),n=this._core.minimum();t.data=t.property.value>i?e>=i?n:i:t.property.value<n?i:t.property.value}},this),"changed.owl.carousel":t.proxy(function(t){"position"==t.property.name&&this.draw()},this),"refreshed.owl.carousel":t.proxy(function(){this._initialized||(this.initialize(),this._initialized=!0),this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation")},this)},this._core.options=t.extend({},e.Defaults,this._core.options),this.$element.on(this._handlers)};e.Defaults={nav:!1,navRewind:!0,navText:["prev","next"],navSpeed:!1,navElement:"div",navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotData:!1,dotsSpeed:!1,dotsContainer:!1,controlsClass:"owl-controls"},e.prototype.initialize=function(){var e,i,n=this._core.settings;n.dotsData||(this._templates=[t("<div>").addClass(n.dotClass).append(t("<span>")).prop("outerHTML")]),n.navContainer&&n.dotsContainer||(this._controls.$container=t("<div>").addClass(n.controlsClass).appendTo(this.$element)),this._controls.$indicators=n.dotsContainer?t(n.dotsContainer):t("<div>").hide().addClass(n.dotsClass).appendTo(this._controls.$container),this._controls.$indicators.on("click","div",t.proxy(function(e){var i=t(e.target).parent().is(this._controls.$indicators)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(i,n.dotsSpeed)},this)),e=n.navContainer?t(n.navContainer):t("<div>").addClass(n.navContainerClass).prependTo(this._controls.$container),this._controls.$next=t("<"+n.navElement+">"),this._controls.$previous=this._controls.$next.clone(),this._controls.$previous.addClass(n.navClass[0]).html(n.navText[0]).hide().prependTo(e).on("click",t.proxy(function(){this.prev(n.navSpeed)},this)),this._controls.$next.addClass(n.navClass[1]).html(n.navText[1]).hide().appendTo(e).on("click",t.proxy(function(){this.next(n.navSpeed)},this));for(i in this._overrides)this._core[i]=t.proxy(this[i],this)},e.prototype.destroy=function(){var t,e,i,n;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)this._controls[e].remove();for(n in this.overides)this._core[n]=this._overrides[n];for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},e.prototype.update=function(){var t,e,i,n=this._core.settings,s=this._core.clones().length/2,r=s+this._core.items().length,o=n.center||n.autoWidth||n.dotData?1:n.dotsEach||n.items;if("page"!==n.slideBy&&(n.slideBy=Math.min(n.slideBy,n.items)),n.dots||"page"==n.slideBy)for(this._pages=[],t=s,e=0,i=0;r>t;t++)(e>=o||0===e)&&(this._pages.push({start:t-s,end:t-s+o-1}),e=0,++i),e+=this._core.mergers(this._core.relative(t))},e.prototype.draw=function(){var e,i,n="",s=this._core.settings,r=(this._core.$stage.children(),this._core.relative(this._core.current()));if(!s.nav||s.loop||s.navRewind||(this._controls.$previous.toggleClass("disabled",0>=r),this._controls.$next.toggleClass("disabled",r>=this._core.maximum())),this._controls.$previous.toggle(s.nav),this._controls.$next.toggle(s.nav),s.dots){if(e=this._pages.length-this._controls.$indicators.children().length,s.dotData&&0!==e){for(i=0;i<this._controls.$indicators.children().length;i++)n+=this._templates[this._core.relative(i)];this._controls.$indicators.html(n)}else e>0?(n=new Array(e+1).join(this._templates[0]),this._controls.$indicators.append(n)):0>e&&this._controls.$indicators.children().slice(e).remove();this._controls.$indicators.find(".active").removeClass("active"),this._controls.$indicators.children().eq(t.inArray(this.current(),this._pages)).addClass("active")}this._controls.$indicators.toggle(s.dots)},e.prototype.onTrigger=function(e){var i=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:i&&(i.center||i.autoWidth||i.dotData?1:i.dotsEach||i.items)}},e.prototype.current=function(){var e=this._core.relative(this._core.current());return t.grep(this._pages,function(t){return t.start<=e&&t.end>=e}).pop()},e.prototype.getPosition=function(e){var i,n,s=this._core.settings;return"page"==s.slideBy?(i=t.inArray(this.current(),this._pages),n=this._pages.length,e?++i:--i,i=this._pages[(i%n+n)%n].start):(i=this._core.relative(this._core.current()),n=this._core.items().length,e?i+=s.slideBy:i-=s.slideBy),i},e.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},e.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},e.prototype.to=function(e,i,n){var s;n?t.proxy(this._overrides.to,this._core)(e,i):(s=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%s+s)%s].start,i))},t.fn.owlCarousel.Constructor.Plugins.Navigation=e}(window.Zepto||window.jQuery,window,document),function(t,e){"use strict";var i=function(n){this._core=n,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(){"URLHash"==this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){var i=t(e.content).find("[data-hash]").andSelf("[data-hash]").attr("data-hash");this._hashes[i]=e.content},this)},this._core.options=t.extend({},i.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(){var t=e.location.hash.substring(1),i=this._core.$stage.children(),n=this._hashes[t]&&i.index(this._hashes[t])||0;return t?void this._core.to(n,!1,!0):!1},this))};i.Defaults={URLhashListener:!1},i.prototype.destroy=function(){var i,n;t(e).off("hashchange.owl.navigation");for(i in this._handlers)this._core.$element.off(i,this._handlers[i]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=i}(window.Zepto||window.jQuery,window,document),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(t){"use strict";var e=window.Slick||{};e=function(){function e(e,n){var s,r,o,a=this;if(a.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:t(e),appendDots:t(e),arrows:!0,asNavFor:null,prevArrow:'<button type="button" data-role="none" class="slick-prev" aria-label="previous">Previous</button>',nextArrow:'<button type="button" data-role="none" class="slick-next" aria-label="next">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,e){return'<button type="button" data-role="none">'+(e+1)+"</button>"},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0},a.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,$list:null,touchObject:{},transformsEnabled:!1},t.extend(a,a.initials),a.activeBreakpoint=null,a.animType=null,a.animProp=null,a.breakpoints=[],a.breakpointSettings=[],a.cssTransitions=!1,a.hidden="hidden",a.paused=!1,a.positionProp=null,a.respondTo=null,a.rowCount=1,a.shouldClick=!0,a.$slider=t(e),a.$slidesCache=null,a.transformType=null,a.transitionType=null,a.visibilityChange="visibilitychange",a.windowWidth=0,a.windowTimer=null,s=t(e).data("slick")||{},a.options=t.extend({},a.defaults,s,n),a.currentSlide=a.options.initialSlide,a.originalSettings=a.options,r=a.options.responsive||null,r&&r.length>-1){a.respondTo=a.options.respondTo||"window";for(o in r)r.hasOwnProperty(o)&&(a.breakpoints.push(r[o].breakpoint),a.breakpointSettings[r[o].breakpoint]=r[o].settings);a.breakpoints.sort(function(t,e){return a.options.mobileFirst===!0?t-e:e-t})}"undefined"!=typeof document.mozHidden?(a.hidden="mozHidden",a.visibilityChange="mozvisibilitychange"):"undefined"!=typeof document.msHidden?(a.hidden="msHidden",a.visibilityChange="msvisibilitychange"):"undefined"!=typeof document.webkitHidden&&(a.hidden="webkitHidden",a.visibilityChange="webkitvisibilitychange"),a.autoPlay=t.proxy(a.autoPlay,a),a.autoPlayClear=t.proxy(a.autoPlayClear,a),a.changeSlide=t.proxy(a.changeSlide,a),a.clickHandler=t.proxy(a.clickHandler,a),a.selectHandler=t.proxy(a.selectHandler,a),a.setPosition=t.proxy(a.setPosition,a),a.swipeHandler=t.proxy(a.swipeHandler,a),a.dragHandler=t.proxy(a.dragHandler,a),a.keyHandler=t.proxy(a.keyHandler,a),a.autoPlayIterator=t.proxy(a.autoPlayIterator,a),a.instanceUid=i++,a.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,a.init(),a.checkResponsive(!0)}var i=0;return e}(),e.prototype.addSlide=e.prototype.slickAdd=function(e,i,n){var s=this;if("boolean"==typeof i)n=i,i=null;else if(0>i||i>=s.slideCount)return!1;s.unload(),"number"==typeof i?0===i&&0===s.$slides.length?t(e).appendTo(s.$slideTrack):n?t(e).insertBefore(s.$slides.eq(i)):t(e).insertAfter(s.$slides.eq(i)):n===!0?t(e).prependTo(s.$slideTrack):t(e).appendTo(s.$slideTrack),s.$slides=s.$slideTrack.children(this.options.slide),s.$slideTrack.children(this.options.slide).detach(),s.$slideTrack.append(s.$slides),s.$slides.each(function(e,i){t(i).attr("data-slick-index",e)}),s.$slidesCache=s.$slides,s.reinit()},e.prototype.animateHeight=function(){var t=this;if(1===t.options.slidesToShow&&t.options.adaptiveHeight===!0&&t.options.vertical===!1){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.animate({height:e},t.options.speed)}},e.prototype.animateSlide=function(e,i){var n={},s=this;s.animateHeight(),s.options.rtl===!0&&s.options.vertical===!1&&(e=-e),s.transformsEnabled===!1?s.options.vertical===!1?s.$slideTrack.animate({left:e},s.options.speed,s.options.easing,i):s.$slideTrack.animate({top:e},s.options.speed,s.options.easing,i):s.cssTransitions===!1?(s.options.rtl===!0&&(s.currentLeft=-s.currentLeft),t({animStart:s.currentLeft}).animate({animStart:e},{duration:s.options.speed,easing:s.options.easing,step:function(t){t=Math.ceil(t),s.options.vertical===!1?(n[s.animType]="translate("+t+"px, 0px)",s.$slideTrack.css(n)):(n[s.animType]="translate(0px,"+t+"px)",s.$slideTrack.css(n))},complete:function(){i&&i.call()}})):(s.applyTransition(),e=Math.ceil(e),s.options.vertical===!1?n[s.animType]="translate3d("+e+"px, 0px, 0px)":n[s.animType]="translate3d(0px,"+e+"px, 0px)",s.$slideTrack.css(n),i&&setTimeout(function(){s.disableTransition(),i.call()},s.options.speed))},e.prototype.asNavFor=function(e){var i=this,n=null!==i.options.asNavFor?t(i.options.asNavFor).slick("getSlick"):null;null!==n&&n.slideHandler(e,!0)},e.prototype.applyTransition=function(t){var e=this,i={};e.options.fade===!1?i[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:i[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,e.options.fade===!1?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},e.prototype.autoPlay=function(){var t=this;t.autoPlayTimer&&clearInterval(t.autoPlayTimer),t.slideCount>t.options.slidesToShow&&t.paused!==!0&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},e.prototype.autoPlayClear=function(){var t=this;t.autoPlayTimer&&clearInterval(t.autoPlayTimer)},e.prototype.autoPlayIterator=function(){var t=this;t.options.infinite===!1?1===t.direction?(t.currentSlide+1===t.slideCount-1&&(t.direction=0),t.slideHandler(t.currentSlide+t.options.slidesToScroll)):(t.currentSlide-1===0&&(t.direction=1),t.slideHandler(t.currentSlide-t.options.slidesToScroll)):t.slideHandler(t.currentSlide+t.options.slidesToScroll)},e.prototype.buildArrows=function(){var e=this;e.options.arrows===!0&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow=t(e.options.prevArrow),e.$nextArrow=t(e.options.nextArrow),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.appendTo(e.options.appendArrows),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.appendTo(e.options.appendArrows),e.options.infinite!==!0&&e.$prevArrow.addClass("slick-disabled"))},e.prototype.buildDots=function(){var e,i,n=this;if(n.options.dots===!0&&n.slideCount>n.options.slidesToShow){for(i='<ul class="'+n.options.dotsClass+'">',e=0;e<=n.getDotCount();e+=1)i+="<li>"+n.options.customPaging.call(this,n,e)+"</li>";i+="</ul>",n.$dots=t(i).appendTo(n.options.appendDots),n.$dots.find("li").first().addClass("slick-active").attr("aria-hidden","false")}},e.prototype.buildOut=function(){var e=this;e.$slides=e.$slider.children(":not(.slick-cloned)").addClass("slick-slide"),e.slideCount=e.$slides.length,e.$slides.each(function(e,i){t(i).attr("data-slick-index",e)}),e.$slidesCache=e.$slides,e.$slider.addClass("slick-slider"),e.$slideTrack=0===e.slideCount?t('<div class="slick-track"/>').appendTo(e.$slider):e.$slides.wrapAll('<div class="slick-track"/>').parent(),e.$list=e.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent(),e.$slideTrack.css("opacity",0),(e.options.centerMode===!0||e.options.swipeToSlide===!0)&&(e.options.slidesToScroll=1),t("img[data-lazy]",e.$slider).not("[src]").addClass("slick-loading"),e.setupInfinite(),e.buildArrows(),e.buildDots(),e.updateDots(),e.options.accessibility===!0&&e.$list.prop("tabIndex",0),e.setSlideClasses("number"==typeof this.currentSlide?this.currentSlide:0),e.options.draggable===!0&&e.$list.addClass("draggable")},e.prototype.buildRows=function(){var t,e,i,n,s,r,o,a=this;if(n=document.createDocumentFragment(),r=a.$slider.children(),a.options.rows>1){for(o=a.options.slidesPerRow*a.options.rows,s=Math.ceil(r.length/o),t=0;s>t;t++){var l=document.createElement("div");for(e=0;e<a.options.rows;e++){var c=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var u=t*o+(e*a.options.slidesPerRow+i);r.get(u)&&c.appendChild(r.get(u))}l.appendChild(c)}n.appendChild(l)}a.$slider.html(n),a.$slider.children().children().children().width(100/a.options.slidesPerRow+"%").css({display:"inline-block"})}},e.prototype.checkResponsive=function(e){var i,n,s,r=this,o=r.$slider.width(),a=window.innerWidth||t(window).width();if("window"===r.respondTo?s=a:"slider"===r.respondTo?s=o:"min"===r.respondTo&&(s=Math.min(a,o)),r.originalSettings.responsive&&r.originalSettings.responsive.length>-1&&null!==r.originalSettings.responsive){n=null;for(i in r.breakpoints)r.breakpoints.hasOwnProperty(i)&&(r.originalSettings.mobileFirst===!1?s<r.breakpoints[i]&&(n=r.breakpoints[i]):s>r.breakpoints[i]&&(n=r.breakpoints[i]));null!==n?null!==r.activeBreakpoint?n!==r.activeBreakpoint&&(r.activeBreakpoint=n,"unslick"===r.breakpointSettings[n]?r.unslick():(r.options=t.extend({},r.originalSettings,r.breakpointSettings[n]),e===!0&&(r.currentSlide=r.options.initialSlide),r.refresh())):(r.activeBreakpoint=n,"unslick"===r.breakpointSettings[n]?r.unslick():(r.options=t.extend({},r.originalSettings,r.breakpointSettings[n]),e===!0&&(r.currentSlide=r.options.initialSlide),r.refresh())):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,e===!0&&(r.currentSlide=r.options.initialSlide),r.refresh())}},e.prototype.changeSlide=function(e,i){var n,s,r,o=this,a=t(e.target);switch(a.is("a")&&e.preventDefault(),r=o.slideCount%o.options.slidesToScroll!==0,n=r?0:(o.slideCount-o.currentSlide)%o.options.slidesToScroll,e.data.message){case"previous":s=0===n?o.options.slidesToScroll:o.options.slidesToShow-n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide-s,!1,i);break;case"next":s=0===n?o.options.slidesToScroll:n,o.slideCount>o.options.slidesToShow&&o.slideHandler(o.currentSlide+s,!1,i);break;case"index":var l=0===e.data.index?0:e.data.index||t(e.target).parent().index()*o.options.slidesToScroll;o.slideHandler(o.checkNavigable(l),!1,i);break;default:return}},e.prototype.checkNavigable=function(t){var e,i,n=this;if(e=n.getNavigableIndexes(),i=0,t>e[e.length-1])t=e[e.length-1];else for(var s in e){if(t<e[s]){t=i;break}i=e[s]}return t},e.prototype.cleanUpEvents=function(){var e=this;e.options.dots===!0&&e.slideCount>e.options.slidesToShow&&t("li",e.$dots).off("click.slick",e.changeSlide),e.options.dots===!0&&e.options.pauseOnDotsHover===!0&&e.options.autoplay===!0&&t("li",e.$dots).off("mouseenter.slick",e.setPaused.bind(e,!0)).off("mouseleave.slick",e.setPaused.bind(e,!1)),e.options.arrows===!0&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow&&e.$prevArrow.off("click.slick",e.changeSlide),e.$nextArrow&&e.$nextArrow.off("click.slick",e.changeSlide)),e.$list.off("touchstart.slick mousedown.slick",e.swipeHandler),e.$list.off("touchmove.slick mousemove.slick",e.swipeHandler),e.$list.off("touchend.slick mouseup.slick",e.swipeHandler),e.$list.off("touchcancel.slick mouseleave.slick",e.swipeHandler),e.$list.off("click.slick",e.clickHandler),e.options.autoplay===!0&&t(document).off(e.visibilityChange,e.visibility),e.$list.off("mouseenter.slick",e.setPaused.bind(e,!0)),e.$list.off("mouseleave.slick",e.setPaused.bind(e,!1)),e.options.accessibility===!0&&e.$list.off("keydown.slick",e.keyHandler),e.options.focusOnSelect===!0&&t(e.$slideTrack).children().off("click.slick",e.selectHandler),t(window).off("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange),t(window).off("resize.slick.slick-"+e.instanceUid,e.resize),t("[draggable!=true]",e.$slideTrack).off("dragstart",e.preventDefault),t(window).off("load.slick.slick-"+e.instanceUid,e.setPosition),t(document).off("ready.slick.slick-"+e.instanceUid,e.setPosition)},e.prototype.cleanUpRows=function(){var t,e=this;e.options.rows>1&&(t=e.$slides.children().children(),t.removeAttr("style"),e.$slider.html(t))},e.prototype.clickHandler=function(t){var e=this;e.shouldClick===!1&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},e.prototype.destroy=function(){var e=this;e.autoPlayClear(),e.touchObject={},e.cleanUpEvents(),t(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&"object"!=typeof e.options.prevArrow&&e.$prevArrow.remove(),e.$nextArrow&&"object"!=typeof e.options.nextArrow&&e.$nextArrow.remove(),e.$slides&&(e.$slides.removeClass("slick-slide slick-active slick-center slick-visible").attr("aria-hidden","true").removeAttr("data-slick-index").css({position:"",left:"",top:"",zIndex:"",opacity:"",width:""}),e.$slider.html(e.$slides)),e.cleanUpRows(),e.$slider.removeClass("slick-slider"),e.$slider.removeClass("slick-initialized")},e.prototype.disableTransition=function(t){var e=this,i={};i[e.transitionType]="",e.options.fade===!1?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},e.prototype.fadeSlide=function(t,e){var i=this;i.cssTransitions===!1?(i.$slides.eq(t).css({zIndex:1e3}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:1e3}),e&&setTimeout(function(){i.disableTransition(t),e.call()},i.options.speed))},e.prototype.filterSlides=e.prototype.slickFilter=function(t){var e=this;null!==t&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},e.prototype.getCurrent=e.prototype.slickCurrentSlide=function(){var t=this;return t.currentSlide},e.prototype.getDotCount=function(){var t=this,e=0,i=0,n=0;if(t.options.infinite===!0)n=Math.ceil(t.slideCount/t.options.slidesToScroll);else if(t.options.centerMode===!0)n=t.slideCount;else for(;e<t.slideCount;)++n,e=i+t.options.slidesToShow,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;return n-1},e.prototype.getLeft=function(t){var e,i,n,s=this,r=0;return s.slideOffset=0,i=s.$slides.first().outerHeight(),s.options.infinite===!0?(s.slideCount>s.options.slidesToShow&&(s.slideOffset=s.slideWidth*s.options.slidesToShow*-1,r=i*s.options.slidesToShow*-1),s.slideCount%s.options.slidesToScroll!==0&&t+s.options.slidesToScroll>s.slideCount&&s.slideCount>s.options.slidesToShow&&(t>s.slideCount?(s.slideOffset=(s.options.slidesToShow-(t-s.slideCount))*s.slideWidth*-1,r=(s.options.slidesToShow-(t-s.slideCount))*i*-1):(s.slideOffset=s.slideCount%s.options.slidesToScroll*s.slideWidth*-1,r=s.slideCount%s.options.slidesToScroll*i*-1))):t+s.options.slidesToShow>s.slideCount&&(s.slideOffset=(t+s.options.slidesToShow-s.slideCount)*s.slideWidth,r=(t+s.options.slidesToShow-s.slideCount)*i),s.slideCount<=s.options.slidesToShow&&(s.slideOffset=0,r=0),s.options.centerMode===!0&&s.options.infinite===!0?s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)-s.slideWidth:s.options.centerMode===!0&&(s.slideOffset=0,s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)),e=s.options.vertical===!1?t*s.slideWidth*-1+s.slideOffset:t*i*-1+r,s.options.variableWidth===!0&&(n=s.slideCount<=s.options.slidesToShow||s.options.infinite===!1?s.$slideTrack.children(".slick-slide").eq(t):s.$slideTrack.children(".slick-slide").eq(t+s.options.slidesToShow),e=n[0]?-1*n[0].offsetLeft:0,s.options.centerMode===!0&&(n=s.options.infinite===!1?s.$slideTrack.children(".slick-slide").eq(t):s.$slideTrack.children(".slick-slide").eq(t+s.options.slidesToShow+1),e=n[0]?-1*n[0].offsetLeft:0,e+=(s.$list.width()-n.outerWidth())/2)),e},e.prototype.getOption=e.prototype.slickGetOption=function(t){var e=this;return e.options[t]},e.prototype.getNavigableIndexes=function(){var t,e=this,i=0,n=0,s=[];for(e.options.infinite===!1?(t=e.slideCount-e.options.slidesToShow+1,e.options.centerMode===!0&&(t=e.slideCount)):(i=-1*e.options.slidesToScroll,n=-1*e.options.slidesToScroll,t=2*e.slideCount);t>i;)s.push(i),i=n+e.options.slidesToScroll,n+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return s},e.prototype.getSlick=function(){return this},e.prototype.getSlideCount=function(){var e,i,n,s=this;return n=s.options.centerMode===!0?s.slideWidth*Math.floor(s.options.slidesToShow/2):0,s.options.swipeToSlide===!0?(s.$slideTrack.find(".slick-slide").each(function(e,r){return r.offsetLeft-n+t(r).outerWidth()/2>-1*s.swipeLeft?(i=r,!1):void 0}),e=Math.abs(t(i).attr("data-slick-index")-s.currentSlide)||1):s.options.slidesToScroll},e.prototype.goTo=e.prototype.slickGoTo=function(t,e){var i=this;i.changeSlide({data:{message:"index",index:parseInt(t)}},e)},e.prototype.init=function(){var e=this;t(e.$slider).hasClass("slick-initialized")||(t(e.$slider).addClass("slick-initialized"),e.buildRows(),e.buildOut(),e.setProps(),e.startLoad(),e.loadSlider(),e.initializeEvents(),e.updateArrows(),e.updateDots()),e.$slider.trigger("init",[e])},e.prototype.initArrowEvents=function(){var t=this;t.options.arrows===!0&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.on("click.slick",{message:"next"},t.changeSlide))},e.prototype.initDotEvents=function(){var e=this;e.options.dots===!0&&e.slideCount>e.options.slidesToShow&&t("li",e.$dots).on("click.slick",{message:"index"},e.changeSlide),e.options.dots===!0&&e.options.pauseOnDotsHover===!0&&e.options.autoplay===!0&&t("li",e.$dots).on("mouseenter.slick",e.setPaused.bind(e,!0)).on("mouseleave.slick",e.setPaused.bind(e,!1))},e.prototype.initializeEvents=function(){var e=this;e.initArrowEvents(),e.initDotEvents(),e.$list.on("touchstart.slick mousedown.slick",{action:"start"},e.swipeHandler),e.$list.on("touchmove.slick mousemove.slick",{action:"move"},e.swipeHandler),e.$list.on("touchend.slick mouseup.slick",{action:"end"},e.swipeHandler),e.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},e.swipeHandler),e.$list.on("click.slick",e.clickHandler),e.options.autoplay===!0&&t(document).on(e.visibilityChange,e.visibility.bind(e)),e.$list.on("mouseenter.slick",e.setPaused.bind(e,!0)),e.$list.on("mouseleave.slick",e.setPaused.bind(e,!1)),e.options.accessibility===!0&&e.$list.on("keydown.slick",e.keyHandler),e.options.focusOnSelect===!0&&t(e.$slideTrack).children().on("click.slick",e.selectHandler),t(window).on("orientationchange.slick.slick-"+e.instanceUid,e.orientationChange.bind(e)),t(window).on("resize.slick.slick-"+e.instanceUid,e.resize.bind(e)),t("[draggable!=true]",e.$slideTrack).on("dragstart",e.preventDefault),t(window).on("load.slick.slick-"+e.instanceUid,e.setPosition),t(document).on("ready.slick.slick-"+e.instanceUid,e.setPosition)},e.prototype.initUI=function(){var t=this;t.options.arrows===!0&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),t.options.dots===!0&&t.slideCount>t.options.slidesToShow&&t.$dots.show(),t.options.autoplay===!0&&t.autoPlay()},e.prototype.keyHandler=function(t){var e=this;37===t.keyCode&&e.options.accessibility===!0?e.changeSlide({data:{message:"previous"}}):39===t.keyCode&&e.options.accessibility===!0&&e.changeSlide({data:{message:"next"}})},e.prototype.lazyLoad=function(){function e(e){t("img[data-lazy]",e).each(function(){var e=t(this),i=t(this).attr("data-lazy"),n=document.createElement("img");n.onload=function(){e.animate({opacity:1},200)},n.src=i,e.css({opacity:0}).attr("src",i).removeAttr("data-lazy").removeClass("slick-loading")})}var i,n,s,r,o=this;o.options.centerMode===!0?o.options.infinite===!0?(s=o.currentSlide+(o.options.slidesToShow/2+1),r=s+o.options.slidesToShow+2):(s=Math.max(0,o.currentSlide-(o.options.slidesToShow/2+1)),r=2+(o.options.slidesToShow/2+1)+o.currentSlide):(s=o.options.infinite?o.options.slidesToShow+o.currentSlide:o.currentSlide,r=s+o.options.slidesToShow,o.options.fade===!0&&(s>0&&s--,r<=o.slideCount&&r++)),i=o.$slider.find(".slick-slide").slice(s,r),e(i),o.slideCount<=o.options.slidesToShow?(n=o.$slider.find(".slick-slide"),e(n)):o.currentSlide>=o.slideCount-o.options.slidesToShow?(n=o.$slider.find(".slick-cloned").slice(0,o.options.slidesToShow),e(n)):0===o.currentSlide&&(n=o.$slider.find(".slick-cloned").slice(-1*o.options.slidesToShow),e(n))},e.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},e.prototype.next=e.prototype.slickNext=function(){var t=this;t.changeSlide({data:{message:"next"}})},e.prototype.orientationChange=function(){var t=this;t.checkResponsive(),t.setPosition()},e.prototype.pause=e.prototype.slickPause=function(){var t=this;t.autoPlayClear(),t.paused=!0},e.prototype.play=e.prototype.slickPlay=function(){var t=this;t.paused=!1,
t.autoPlay()},e.prototype.postSlide=function(t){var e=this;e.$slider.trigger("afterChange",[e,t]),e.animating=!1,e.setPosition(),e.swipeLeft=null,e.options.autoplay===!0&&e.paused===!1&&e.autoPlay()},e.prototype.prev=e.prototype.slickPrev=function(){var t=this;t.changeSlide({data:{message:"previous"}})},e.prototype.preventDefault=function(t){t.preventDefault()},e.prototype.progressiveLazyLoad=function(){var e,i,n=this;e=t("img[data-lazy]",n.$slider).length,e>0&&(i=t("img[data-lazy]",n.$slider).first(),i.attr("src",i.attr("data-lazy")).removeClass("slick-loading").load(function(){i.removeAttr("data-lazy"),n.progressiveLazyLoad(),n.options.adaptiveHeight===!0&&n.setPosition()}).error(function(){i.removeAttr("data-lazy"),n.progressiveLazyLoad()}))},e.prototype.refresh=function(){var e=this,i=e.currentSlide;e.destroy(),t.extend(e,e.initials),e.init(),e.changeSlide({data:{message:"index",index:i}},!1)},e.prototype.reinit=function(){var e=this;e.$slides=e.$slideTrack.children(e.options.slide).addClass("slick-slide"),e.slideCount=e.$slides.length,e.currentSlide>=e.slideCount&&0!==e.currentSlide&&(e.currentSlide=e.currentSlide-e.options.slidesToScroll),e.slideCount<=e.options.slidesToShow&&(e.currentSlide=0),e.setProps(),e.setupInfinite(),e.buildArrows(),e.updateArrows(),e.initArrowEvents(),e.buildDots(),e.updateDots(),e.initDotEvents(),e.options.focusOnSelect===!0&&t(e.$slideTrack).children().on("click.slick",e.selectHandler),e.setSlideClasses(0),e.setPosition(),e.$slider.trigger("reInit",[e])},e.prototype.resize=function(){var e=this;t(window).width()!==e.windowWidth&&(clearTimeout(e.windowDelay),e.windowDelay=window.setTimeout(function(){e.windowWidth=t(window).width(),e.checkResponsive(),e.setPosition()},50))},e.prototype.removeSlide=e.prototype.slickRemove=function(t,e,i){var n=this;return"boolean"==typeof t?(e=t,t=e===!0?0:n.slideCount-1):t=e===!0?--t:t,n.slideCount<1||0>t||t>n.slideCount-1?!1:(n.unload(),i===!0?n.$slideTrack.children().remove():n.$slideTrack.children(this.options.slide).eq(t).remove(),n.$slides=n.$slideTrack.children(this.options.slide),n.$slideTrack.children(this.options.slide).detach(),n.$slideTrack.append(n.$slides),n.$slidesCache=n.$slides,void n.reinit())},e.prototype.setCSS=function(t){var e,i,n=this,s={};n.options.rtl===!0&&(t=-t),e="left"==n.positionProp?Math.ceil(t)+"px":"0px",i="top"==n.positionProp?Math.ceil(t)+"px":"0px",s[n.positionProp]=t,n.transformsEnabled===!1?n.$slideTrack.css(s):(s={},n.cssTransitions===!1?(s[n.animType]="translate("+e+", "+i+")",n.$slideTrack.css(s)):(s[n.animType]="translate3d("+e+", "+i+", 0px)",n.$slideTrack.css(s)))},e.prototype.setDimensions=function(){var t=this;t.options.vertical===!1?t.options.centerMode===!0&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),t.options.centerMode===!0&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),t.options.vertical===!1&&t.options.variableWidth===!1?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):t.options.variableWidth===!0?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length)));var e=t.$slides.first().outerWidth(!0)-t.$slides.first().width();t.options.variableWidth===!1&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},e.prototype.setFade=function(){var e,i=this;i.$slides.each(function(n,s){e=i.slideWidth*n*-1,i.options.rtl===!0?t(s).css({position:"relative",right:e,top:0,zIndex:800,opacity:0}):t(s).css({position:"relative",left:e,top:0,zIndex:800,opacity:0})}),i.$slides.eq(i.currentSlide).css({zIndex:900,opacity:1})},e.prototype.setHeight=function(){var t=this;if(1===t.options.slidesToShow&&t.options.adaptiveHeight===!0&&t.options.vertical===!1){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.css("height",e)}},e.prototype.setOption=e.prototype.slickSetOption=function(t,e,i){var n=this;n.options[t]=e,i===!0&&(n.unload(),n.reinit())},e.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),t.options.fade===!1?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},e.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=t.options.vertical===!0?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),(void 0!==e.WebkitTransition||void 0!==e.MozTransition||void 0!==e.msTransition)&&t.options.useCSS===!0&&(t.cssTransitions=!0),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(t.animType=!1)),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform&&(t.animType=!1)),void 0!==e.transform&&t.animType!==!1&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=null!==t.animType&&t.animType!==!1},e.prototype.setSlideClasses=function(t){var e,i,n,s,r=this;r.$slider.find(".slick-slide").removeClass("slick-active").attr("aria-hidden","true").removeClass("slick-center"),i=r.$slider.find(".slick-slide"),r.options.centerMode===!0?(e=Math.floor(r.options.slidesToShow/2),r.options.infinite===!0&&(t>=e&&t<=r.slideCount-1-e?r.$slides.slice(t-e,t+e+1).addClass("slick-active").attr("aria-hidden","false"):(n=r.options.slidesToShow+t,i.slice(n-e+1,n+e+2).addClass("slick-active").attr("aria-hidden","false")),0===t?i.eq(i.length-1-r.options.slidesToShow).addClass("slick-center"):t===r.slideCount-1&&i.eq(r.options.slidesToShow).addClass("slick-center")),r.$slides.eq(t).addClass("slick-center")):t>=0&&t<=r.slideCount-r.options.slidesToShow?r.$slides.slice(t,t+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=r.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(s=r.slideCount%r.options.slidesToShow,n=r.options.infinite===!0?r.options.slidesToShow+t:t,r.options.slidesToShow==r.options.slidesToScroll&&r.slideCount-t<r.options.slidesToShow?i.slice(n-(r.options.slidesToShow-s),n+s).addClass("slick-active").attr("aria-hidden","false"):i.slice(n,n+r.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false")),"ondemand"===r.options.lazyLoad&&r.lazyLoad()},e.prototype.setupInfinite=function(){var e,i,n,s=this;if(s.options.fade===!0&&(s.options.centerMode=!1),s.options.infinite===!0&&s.options.fade===!1&&(i=null,s.slideCount>s.options.slidesToShow)){for(n=s.options.centerMode===!0?s.options.slidesToShow+1:s.options.slidesToShow,e=s.slideCount;e>s.slideCount-n;e-=1)i=e-1,t(s.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i-s.slideCount).prependTo(s.$slideTrack).addClass("slick-cloned");for(e=0;n>e;e+=1)i=e,t(s.$slides[i]).clone(!0).attr("id","").attr("data-slick-index",i+s.slideCount).appendTo(s.$slideTrack).addClass("slick-cloned");s.$slideTrack.find(".slick-cloned").find("[id]").each(function(){t(this).attr("id","")})}},e.prototype.setPaused=function(t){var e=this;e.options.autoplay===!0&&e.options.pauseOnHover===!0&&(e.paused=t,e.autoPlayClear())},e.prototype.selectHandler=function(e){var i=this,n=t(e.target).is(".slick-slide")?t(e.target):t(e.target).parents(".slick-slide"),s=parseInt(n.attr("data-slick-index"));return s||(s=0),i.slideCount<=i.options.slidesToShow?(i.$slider.find(".slick-slide").removeClass("slick-active").attr("aria-hidden","true"),i.$slides.eq(s).addClass("slick-active").attr("aria-hidden","false"),i.options.centerMode===!0&&(i.$slider.find(".slick-slide").removeClass("slick-center"),i.$slides.eq(s).addClass("slick-center")),void i.asNavFor(s)):void i.slideHandler(s)},e.prototype.slideHandler=function(t,e,i){var n,s,r,o,a=null,l=this;return e=e||!1,l.animating===!0&&l.options.waitForAnimate===!0||l.options.fade===!0&&l.currentSlide===t||l.slideCount<=l.options.slidesToShow?void 0:(e===!1&&l.asNavFor(t),n=t,a=l.getLeft(n),o=l.getLeft(l.currentSlide),l.currentLeft=null===l.swipeLeft?o:l.swipeLeft,l.options.infinite===!1&&l.options.centerMode===!1&&(0>t||t>l.getDotCount()*l.options.slidesToScroll)?void(l.options.fade===!1&&(n=l.currentSlide,i!==!0?l.animateSlide(o,function(){l.postSlide(n)}):l.postSlide(n))):l.options.infinite===!1&&l.options.centerMode===!0&&(0>t||t>l.slideCount-l.options.slidesToScroll)?void(l.options.fade===!1&&(n=l.currentSlide,i!==!0?l.animateSlide(o,function(){l.postSlide(n)}):l.postSlide(n))):(l.options.autoplay===!0&&clearInterval(l.autoPlayTimer),s=0>n?l.slideCount%l.options.slidesToScroll!==0?l.slideCount-l.slideCount%l.options.slidesToScroll:l.slideCount+n:n>=l.slideCount?l.slideCount%l.options.slidesToScroll!==0?0:n-l.slideCount:n,l.animating=!0,l.$slider.trigger("beforeChange",[l,l.currentSlide,s]),r=l.currentSlide,l.currentSlide=s,l.setSlideClasses(l.currentSlide),l.updateDots(),l.updateArrows(),l.options.fade===!0?(i!==!0?l.fadeSlide(s,function(){l.postSlide(s)}):l.postSlide(s),void l.animateHeight()):void(i!==!0?l.animateSlide(a,function(){l.postSlide(s)}):l.postSlide(s))))},e.prototype.startLoad=function(){var t=this;t.options.arrows===!0&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),t.options.dots===!0&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},e.prototype.swipeDirection=function(){var t,e,i,n,s=this;return t=s.touchObject.startX-s.touchObject.curX,e=s.touchObject.startY-s.touchObject.curY,i=Math.atan2(e,t),n=Math.round(180*i/Math.PI),0>n&&(n=360-Math.abs(n)),45>=n&&n>=0?s.options.rtl===!1?"left":"right":360>=n&&n>=315?s.options.rtl===!1?"left":"right":n>=135&&225>=n?s.options.rtl===!1?"right":"left":s.options.verticalSwiping===!0?n>=35&&135>=n?"left":"right":"vertical"},e.prototype.swipeEnd=function(t){var e,i=this;if(i.dragging=!1,i.shouldClick=i.touchObject.swipeLength>10?!1:!0,void 0===i.touchObject.curX)return!1;if(i.touchObject.edgeHit===!0&&i.$slider.trigger("edge",[i,i.swipeDirection()]),i.touchObject.swipeLength>=i.touchObject.minSwipe)switch(i.swipeDirection()){case"left":e=i.options.swipeToSlide?i.checkNavigable(i.currentSlide+i.getSlideCount()):i.currentSlide+i.getSlideCount(),i.slideHandler(e),i.currentDirection=0,i.touchObject={},i.$slider.trigger("swipe",[i,"left"]);break;case"right":e=i.options.swipeToSlide?i.checkNavigable(i.currentSlide-i.getSlideCount()):i.currentSlide-i.getSlideCount(),i.slideHandler(e),i.currentDirection=1,i.touchObject={},i.$slider.trigger("swipe",[i,"right"])}else i.touchObject.startX!==i.touchObject.curX&&(i.slideHandler(i.currentSlide),i.touchObject={})},e.prototype.swipeHandler=function(t){var e=this;if(!(e.options.swipe===!1||"ontouchend"in document&&e.options.swipe===!1||e.options.draggable===!1&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,e.options.verticalSwiping===!0&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},e.prototype.swipeMove=function(t){var e,i,n,s,r,o=this;return r=void 0!==t.originalEvent?t.originalEvent.touches:null,!o.dragging||r&&1!==r.length?!1:(e=o.getLeft(o.currentSlide),o.touchObject.curX=void 0!==r?r[0].pageX:t.clientX,o.touchObject.curY=void 0!==r?r[0].pageY:t.clientY,o.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(o.touchObject.curX-o.touchObject.startX,2))),o.options.verticalSwiping===!0&&(o.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(o.touchObject.curY-o.touchObject.startY,2)))),i=o.swipeDirection(),"vertical"!==i?(void 0!==t.originalEvent&&o.touchObject.swipeLength>4&&t.preventDefault(),s=(o.options.rtl===!1?1:-1)*(o.touchObject.curX>o.touchObject.startX?1:-1),o.options.verticalSwiping===!0&&(s=o.touchObject.curY>o.touchObject.startY?1:-1),n=o.touchObject.swipeLength,o.touchObject.edgeHit=!1,o.options.infinite===!1&&(0===o.currentSlide&&"right"===i||o.currentSlide>=o.getDotCount()&&"left"===i)&&(n=o.touchObject.swipeLength*o.options.edgeFriction,o.touchObject.edgeHit=!0),o.options.vertical===!1?o.swipeLeft=e+n*s:o.swipeLeft=e+n*(o.$list.height()/o.listWidth)*s,o.options.verticalSwiping===!0&&(o.swipeLeft=e+n*s),o.options.fade===!0||o.options.touchMove===!1?!1:o.animating===!0?(o.swipeLeft=null,!1):void o.setCSS(o.swipeLeft)):void 0)},e.prototype.swipeStart=function(t){var e,i=this;return 1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow?(i.touchObject={},!1):(void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==e?e.pageX:t.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==e?e.pageY:t.clientY,void(i.dragging=!0))},e.prototype.unfilterSlides=e.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},e.prototype.unload=function(){var e=this;t(".slick-cloned",e.$slider).remove(),e.$dots&&e.$dots.remove(),e.$prevArrow&&"object"!=typeof e.options.prevArrow&&e.$prevArrow.remove(),e.$nextArrow&&"object"!=typeof e.options.nextArrow&&e.$nextArrow.remove(),e.$slides.removeClass("slick-slide slick-active slick-visible").attr("aria-hidden","true").css("width","")},e.prototype.unslick=function(){var t=this;t.destroy()},e.prototype.updateArrows=function(){var t,e=this;t=Math.floor(e.options.slidesToShow/2),e.options.arrows===!0&&e.options.infinite!==!0&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.removeClass("slick-disabled"),e.$nextArrow.removeClass("slick-disabled"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled"),e.$nextArrow.removeClass("slick-disabled")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&e.options.centerMode===!1?(e.$nextArrow.addClass("slick-disabled"),e.$prevArrow.removeClass("slick-disabled")):e.currentSlide>=e.slideCount-1&&e.options.centerMode===!0&&(e.$nextArrow.addClass("slick-disabled"),e.$prevArrow.removeClass("slick-disabled")))},e.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").attr("aria-hidden","true"),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden","false"))},e.prototype.visibility=function(){var t=this;document[t.hidden]?(t.paused=!0,t.autoPlayClear()):(t.paused=!1,t.autoPlay())},t.fn.slick=function(){var t,i=this,n=arguments[0],s=Array.prototype.slice.call(arguments,1),r=i.length,o=0;for(o;r>o;o++)if("object"==typeof n||"undefined"==typeof n?i[o].slick=new e(i[o],n):t=i[o].slick[n].apply(i[o].slick,s),"undefined"!=typeof t)return t;return i}});
//# sourceMappingURL=data:application/json;base64,
